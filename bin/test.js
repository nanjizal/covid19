// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var covid19_Main = function() {
	this.currentStr = "";
	this.lastStr = "";
	this.unplotted = "unplotted<br>";
	this.framesDivisor = 8;
	this.count = 0;
	this.months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
	this.dayCounter = new covid19_datas_InternalDayCounter(5,3,2020);
	this.csvStats = "https://raw.githubusercontent.com/tomwhite/covid-19-uk-data/master/data/covid-19-cases-uk.csv";
	this.divertTrace = new htmlHelper_tools_DivertTrace();
	var e = null;
	var this1;
	if(e == null) {
		var canvas = window.document.createElement("canvas");
		var dom = canvas;
		var style = dom.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = "0px";
		style.top = "0px";
		style.position = "absolute";
		this1 = canvas;
	} else {
		this1 = e;
	}
	var canvas1 = this1;
	canvas1.width = 1024;
	canvas1.height = 768;
	window.document.body.appendChild(canvas1);
	var this2 = new htmlHelper_canvas_CanvasPlus(canvas1.getContext("2d",null),10,10);
	this.surface = this2;
	this.vectorUK();
	this.mapPlot = new covid19_visual_UKcanvasPlot(this.surface);
	var _this = this.mapPlot;
	var this3 = _this.plotting;
	var arr = [];
	var count = 0;
	var tempCount = 0;
	var _g = 49;
	var _g1 = 60;
	while(_g < _g1) {
		var lat = _g++;
		if((lat + 1) % 2 == 0) {
			continue;
		}
		var temp = [];
		tempCount = 1;
		var sp = new latLongUK_LatLong(lat,-9);
		var en = latLongUK_LatLongUK.ll_to_osOld(sp);
		var this4 = en;
		var flat = this4;
		temp[0] = new latLongUK_helpers_XY(flat.east * this3.scale + this3.dx,this3.negY - flat.north * this3.scale + this3.dy);
		var _g2 = -9;
		var _g11 = 2;
		while(_g2 < _g11) {
			var long = _g2++;
			var sp1 = new latLongUK_LatLong(lat,long);
			var en1 = latLongUK_LatLongUK.ll_to_osOld(sp1);
			var this5 = en1;
			var flat1 = this5;
			temp[tempCount++] = new latLongUK_helpers_XY(flat1.east * this3.scale + this3.dx,this3.negY - flat1.north * this3.scale + this3.dy);
			var sp2 = new latLongUK_LatLong(lat,long + 0.25);
			var en2 = latLongUK_LatLongUK.ll_to_osOld(sp2);
			var this6 = en2;
			var flat2 = this6;
			temp[tempCount++] = new latLongUK_helpers_XY(flat2.east * this3.scale + this3.dx,this3.negY - flat2.north * this3.scale + this3.dy);
			var sp3 = new latLongUK_LatLong(lat,long + 0.5);
			var en3 = latLongUK_LatLongUK.ll_to_osOld(sp3);
			var this7 = en3;
			var flat3 = this7;
			temp[tempCount++] = new latLongUK_helpers_XY(flat3.east * this3.scale + this3.dx,this3.negY - flat3.north * this3.scale + this3.dy);
			var sp4 = new latLongUK_LatLong(lat,long + 0.75);
			var en4 = latLongUK_LatLongUK.ll_to_osOld(sp4);
			var this8 = en4;
			var flat4 = this8;
			temp[tempCount++] = new latLongUK_helpers_XY(flat4.east * this3.scale + this3.dx,this3.negY - flat4.north * this3.scale + this3.dy);
		}
		var sp5 = new latLongUK_LatLong(lat,3);
		var en5 = latLongUK_LatLongUK.ll_to_osOld(sp5);
		var this9 = en5;
		var flat5 = this9;
		temp[tempCount++] = new latLongUK_helpers_XY(flat5.east * this3.scale + this3.dx,this3.negY - flat5.north * this3.scale + this3.dy);
		arr[count++] = temp;
	}
	var _g21 = -9;
	var _g3 = 4;
	while(_g21 < _g3) {
		var long1 = _g21++;
		if((long1 + 1) % 2 == 0) {
			continue;
		}
		var temp1 = [];
		tempCount = 1;
		var sp6 = new latLongUK_LatLong(49,long1);
		var en6 = latLongUK_LatLongUK.ll_to_osOld(sp6);
		var this10 = en6;
		var flat6 = this10;
		temp1[0] = new latLongUK_helpers_XY(flat6.east * this3.scale + this3.dx,this3.negY - flat6.north * this3.scale + this3.dy);
		var _g22 = 49;
		var _g31 = 60;
		while(_g22 < _g31) {
			var lat1 = _g22++;
			var sp7 = new latLongUK_LatLong(lat1,long1);
			var en7 = latLongUK_LatLongUK.ll_to_osOld(sp7);
			var this11 = en7;
			var flat7 = this11;
			temp1[tempCount++] = new latLongUK_helpers_XY(flat7.east * this3.scale + this3.dx,this3.negY - flat7.north * this3.scale + this3.dy);
		}
		arr[count++] = temp1;
	}
	var lines = arr;
	var this12 = _this.surface;
	var r = 0;
	var g = 0;
	var b = 255;
	this12.me.fillStyle = "rgba(" + r + "," + g + "," + b + "," + 0. + ")";
	this12.me.beginPath();
	var this13 = _this.surface;
	this13.me.lineWidth = 1.;
	var r1 = 12;
	var g1 = 12;
	var b1 = 240;
	this13.me.strokeStyle = "rgba(" + r1 + "," + g1 + "," + b1 + "," + 0.2 + ")";
	var no = lines.length;
	var line;
	var len;
	var point;
	var _g4 = 0;
	var _g12 = no;
	while(_g4 < _g12) {
		var i = _g4++;
		line = lines[i];
		len = line.length;
		point = line[0];
		var this14 = _this.surface;
		var x = point.x;
		var y = point.y;
		this14.x = x;
		this14.y = y;
		this14.me.moveTo(x,y);
		var _g5 = 1;
		var _g13 = len;
		while(_g5 < _g13) {
			var j = _g5++;
			point = line[j];
			var this15 = _this.surface;
			var x1 = point.x;
			var y1 = point.y;
			this15.x = x1;
			this15.y = y1;
			this15.me.lineTo(x1,y1);
		}
	}
	var this16 = _this.surface;
	this16.me.stroke();
	this16.me.closePath();
	this16.me.fill();
	this.textLoader = new htmlHelper_tools_TextLoader(["../data/postcodeAdmin.csv","../data/E_areas.csv","../data/latLongAdditional.csv",this.csvStats],$bind(this,this.finished));
};
covid19_Main.__name__ = true;
covid19_Main.main = function() {
	new covid19_Main();
};
covid19_Main.prototype = {
	vectorUK: function() {
		var uk1 = new uk_CanvasUK(this.surface);
		uk1.dx = 28;
		uk1.dy = 47;
		uk1.alpha = 0.7;
		uk1.scaleY = 0.975;
		uk1.scaleX = 1.04;
		uk1.draw();
	}
	,finished: function() {
		this.parseCSV();
		haxe_Log.trace("Animating UK data",{ fileName : "src/covid19/Main.hx", lineNumber : 95, className : "covid19.Main", methodName : "finished"});
		if(htmlHelper_tools_AnimateTimer.s == null) {
			htmlHelper_tools_AnimateTimer.s = window.document.createElement("style");
			htmlHelper_tools_AnimateTimer.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
			window.document.getElementsByTagName("head")[0].appendChild(htmlHelper_tools_AnimateTimer.s);
			htmlHelper_tools_AnimateTimer.s.animation = "spin 1s linear infinite";
			htmlHelper_tools_AnimateTimer.loop(60.0);
		}
		htmlHelper_tools_AnimateTimer.onFrame = $bind(this,this.render);
	}
	,render: function(i) {
		this.count++;
		if(this.count % this.framesDivisor == 0) {
			this.count = 0;
			this.renderDate();
			var this1 = this.dayCounter;
			var year = this1.year;
			var isLeap = year % 4 == 0 && (year % 100 == 0 ? year % 400 == 0 : true);
			var isLeapYear = isLeap;
			if(isLeapYear == null) {
				isLeapYear = false;
			}
			var dayTot = datetime_utils_DateTimeMonthUtils.days(this1.month,isLeapYear);
			this1.day++;
			if(this1.day > dayTot) {
				this1.day = 1;
				this1.month++;
				if(this1.month > 12) {
					this1.month = 1;
					this1.year++;
				}
			}
		}
	}
	,renderDate: function() {
		this.lastStr = this.currentStr + this.lastStr;
		var str = "";
		var colors = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var dayStat = covid19_datas__$StatsC19Arr_StatsC19Arr_$Impl_$.getByDate(this.stat19Arr,this.dayCounter);
		var _g = 0;
		var _g1 = dayStat.length;
		while(_g < _g1) {
			var i = _g++;
			var stat = dayStat[i];
			var this1 = this.additionalArr;
			var area = stat.area;
			var found = false;
			var eastNorth = new latLongUK_EastNorth(0.,0.);
			var _g2 = 0;
			while(_g2 < this1.length) {
				var pos = this1[_g2];
				++_g2;
				if(pos.place.toLowerCase() == area.toLowerCase()) {
					eastNorth.east = pos.east;
					eastNorth.north = pos.north;
					found = true;
					break;
				}
			}
			var eastNorth1 = eastNorth;
			if(!(!(eastNorth1.east == 0. && eastNorth1.north == 0.))) {
				var this2 = this.longLatArr;
				var area1 = stat.area;
				var found1 = false;
				var eastNorth2 = new latLongUK_EastNorth(0.,0.);
				var _g3 = 0;
				while(_g3 < this2.length) {
					var pos1 = this2[_g3];
					++_g3;
					if(pos1.admin_area.toLowerCase() == area1.toLowerCase()) {
						eastNorth2.east = pos1.east;
						eastNorth2.north = pos1.north;
						found1 = true;
						break;
					}
				}
				if(!found1) {
					var _g11 = 0;
					while(_g11 < this2.length) {
						var pos2 = this2[_g11];
						++_g11;
						if(pos2.county.toLowerCase() == area1.toLowerCase()) {
							eastNorth2.east = pos2.east;
							eastNorth2.north = pos2.north;
							found1 = true;
							break;
						}
					}
				}
				if(!found1) {
					var _g12 = 0;
					while(_g12 < this2.length) {
						var pos3 = this2[_g12];
						++_g12;
						if(pos3.admin_area.indexOf(" ") != -1) {
							if(pos3.admin_area.toLowerCase().indexOf(area1.toLowerCase()) != -1) {
								eastNorth2.east = pos3.east;
								eastNorth2.north = pos3.north;
								found1 = true;
								break;
							}
						}
					}
				}
				eastNorth1 = eastNorth2;
			}
			if(!(!(eastNorth1.east == 0. && eastNorth1.north == 0.))) {
				var this3 = this.area9Arr;
				var str1 = stat.areaCode;
				var stringMap = new haxe_ds_StringMap();
				var _g4 = 0;
				var _g13 = this3.length;
				while(_g4 < _g13) {
					var i1 = _g4++;
					var key = this3[i1].area9;
					var value = this3[i1].place;
					if(__map_reserved[key] != null) {
						stringMap.setReserved(key,value);
					} else {
						stringMap.h[key] = value;
					}
				}
				var _this = stringMap;
				if(__map_reserved[str1] != null ? _this.existsReserved(str1) : _this.h.hasOwnProperty(str1)) {
					var this4 = this.area9Arr;
					var str2 = stat.areaCode;
					var stringMap1 = new haxe_ds_StringMap();
					var _g5 = 0;
					var _g14 = this4.length;
					while(_g5 < _g14) {
						var i2 = _g5++;
						var key1 = this4[i2].area9;
						var value1 = this4[i2].place;
						if(__map_reserved[key1] != null) {
							stringMap1.setReserved(key1,value1);
						} else {
							stringMap1.h[key1] = value1;
						}
					}
					var _this1 = stringMap1;
					var area2 = __map_reserved[str2] != null ? _this1.getReserved(str2) : _this1.h[str2];
					var this5 = this.longLatArr;
					var found2 = false;
					var eastNorth3 = new latLongUK_EastNorth(0.,0.);
					var _g6 = 0;
					while(_g6 < this5.length) {
						var pos4 = this5[_g6];
						++_g6;
						if(pos4.admin_area.toLowerCase() == area2.toLowerCase()) {
							eastNorth3.east = pos4.east;
							eastNorth3.north = pos4.north;
							found2 = true;
							break;
						}
					}
					if(!found2) {
						var _g15 = 0;
						while(_g15 < this5.length) {
							var pos5 = this5[_g15];
							++_g15;
							if(pos5.county.toLowerCase() == area2.toLowerCase()) {
								eastNorth3.east = pos5.east;
								eastNorth3.north = pos5.north;
								found2 = true;
								break;
							}
						}
					}
					if(!found2) {
						var _g16 = 0;
						while(_g16 < this5.length) {
							var pos6 = this5[_g16];
							++_g16;
							if(pos6.admin_area.indexOf(" ") != -1) {
								if(pos6.admin_area.toLowerCase().indexOf(area2.toLowerCase()) != -1) {
									eastNorth3.east = pos6.east;
									eastNorth3.north = pos6.north;
									found2 = true;
									break;
								}
							}
						}
					}
					eastNorth1 = eastNorth3;
				}
			}
			var eastNorth4 = eastNorth1;
			if(!(eastNorth4.east == 0. && eastNorth4.north == 0.)) {
				this.mapPlot.plot(eastNorth4,stat.totalCases,colors);
			}
			if(!(eastNorth4.east == 0. && eastNorth4.north == 0.)) {
				var str3 = "<b>" + stat.totalCases + "</b>" + " ill, ";
				var date = stat.date;
				var days = ((date - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date)) / 86400 | 0) + 1;
				var str4 = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date)) + " ";
				var str5 = this.months;
				var days1 = ((date - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date)) / 86400 | 0) + 1;
				str += str3 + (str4 + str5[datetime_utils_DateTimeMonthUtils.getMonth(days1,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date)) - 1]) + ", " + stat.area + " " + ("east " + Math.round(eastNorth4.east) + " north " + Math.round(eastNorth4.north));
				str += "<br>";
			} else {
				var tmp = this;
				var tmp1 = tmp.unplotted;
				var date1 = stat.date;
				var days2 = ((date1 - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date1)) / 86400 | 0) + 1;
				var tmp2 = datetime_utils_DateTimeMonthUtils.getMonthDay(days2,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date1)) + " ";
				var tmp3 = this.months;
				var days3 = ((date1 - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date1)) / 86400 | 0) + 1;
				tmp.unplotted = tmp1 + (tmp2 + tmp3[datetime_utils_DateTimeMonthUtils.getMonth(days3,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date1)) - 1] + ", " + stat.area + " " + stat.totalCases + " ill, ");
				this.unplotted += "<br>";
			}
		}
		if(str != "") {
			this.currentStr = str;
		} else {
			this.divertTrace.traceString = "";
			haxe_Log.trace(this.unplotted + "<br>-plotted<br>" + this.currentStr + this.lastStr,{ fileName : "src/covid19/Main.hx", lineNumber : 138, className : "covid19.Main", methodName : "renderDate"});
			htmlHelper_tools_AnimateTimer.onFrame = function(i3) {
			};
		}
	}
	,parseCSV: function() {
		var arr = this.parseData("postcodeAdmin.csv");
		var arrLL = [];
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			var arr1 = arr[i];
			var toFloat = Std.parseFloat;
			var val = latLongUK_LatLongUK.ll_to_osOld(new latLongUK_LatLong(toFloat(arr1[2]),toFloat(arr1[3])));
			var val1 = val;
			var this1 = new covid19_datas_InternalLongLatAreas(StringTools.trim(arr1[0]),StringTools.trim(arr1[1]),parseFloat(arr1[2]),parseFloat(arr1[3]),Std.parseInt(arr1[4]),Std.parseInt(arr1[5]),Std.parseInt(arr1[6]),Std.parseInt(arr1[7]),val1.east,val1.north);
			arrLL[i] = this1;
		}
		var this2 = arrLL;
		this.longLatArr = this2;
		var arr2 = this.parseData("covid-19-cases-uk.csv");
		var arr19 = [];
		var _g2 = 0;
		var _g11 = arr2.length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var arr3 = arr2[i1];
			var str = arr3[0];
			StringTools.trim(str);
			var str1 = arr3[1];
			StringTools.trim(str1);
			var str2 = arr3[2];
			StringTools.trim(str2);
			var str3 = arr3[3];
			StringTools.trim(str3);
			str3 = str3;
			if(StringTools.startsWith(str3,"\"")) {
				str3 = HxOverrides.substr(str3,1,str3.length);
			}
			if(StringTools.endsWith(str3,"\"")) {
				str3 = HxOverrides.substr(str3,0,str3.length);
			}
			var str4 = arr3[4];
			StringTools.trim(str4);
			var str5 = str4;
			if(str5 == "1 to 4") {
				str5 = "2";
			}
			var totalCases = Std.parseInt(str5);
			if(totalCases == null && arr3.length == 6) {
				var str6 = arr3[5];
				StringTools.trim(str6);
				str5 = str6;
				totalCases = Std.parseInt(str5);
			}
			var this3 = new covid19_datas_InternalStatsC19(str,str1,str2,str3,totalCases);
			arr19[i1] = this3;
		}
		var this4 = arr19;
		this.stat19Arr = this4;
		var arr4 = this.parseData("E_areas.csv");
		var arr9 = [];
		var _g3 = 0;
		var _g12 = arr4.length;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var arr5 = arr4[i2];
			var this5 = new covid19_datas_InternalArea9(StringTools.trim(arr5[0]),StringTools.trim(arr5[1]));
			arr9[i2] = this5;
		}
		var this6 = arr9;
		this.area9Arr = this6;
		var arr6 = this.parseData("latLongAdditional.csv");
		var arrAL = [];
		var _g4 = 0;
		var _g13 = arr6.length;
		while(_g4 < _g13) {
			var i3 = _g4++;
			var arr7 = arr6[i3];
			var toFloat1 = Std.parseFloat;
			var val2 = latLongUK_LatLongUK.ll_to_osOld(new latLongUK_LatLong(toFloat1(arr7[2]),toFloat1(arr7[3])));
			var val3 = val2;
			var this7 = new covid19_datas_InternalAddLatLong(StringTools.trim(arr7[0]),StringTools.trim(arr7[1]),parseFloat(arr7[2]),parseFloat(arr7[3]),val3.east,val3.north);
			arrAL[i3] = this7;
		}
		var this8 = arrAL;
		this.additionalArr = this8;
	}
	,parseData: function(fileNom) {
		var _this = this.textLoader.contents;
		var str = __map_reserved[fileNom] != null ? _this.getReserved(fileNom) : _this.h[fileNom];
		var sl = new htmlHelper_tools_StringCodeIterator(str);
		sl.c = sl.str.charCodeAt(sl.pos++);
		var arr = [];
		var arrTemp = [];
		var no = 0;
		var count = 0;
		while(sl.pos < sl.length) {
			switch(sl.c) {
			case 10:case 13:
				sl.last2 = sl.last;
				sl.last = sl.b.b;
				arrTemp[count] = sl.last;
				arr[no++] = arrTemp.slice();
				count = 0;
				sl.b = new StringBuf();
				break;
			case 44:
				if(count == 0) {
					arrTemp.length = 0;
					sl.last2 = sl.last;
					sl.last = sl.b.b;
					arrTemp[0] = sl.last;
				} else {
					sl.last2 = sl.last;
					sl.last = sl.b.b;
					arrTemp[count] = sl.last;
				}
				++count;
				sl.b = new StringBuf();
				break;
			default:
				var c = sl.c;
				sl.b.b += String.fromCodePoint(c);
			}
			sl.c = sl.str.charCodeAt(sl.pos++);
		}
		var arr1 = arr;
		arr1.shift();
		return arr1;
	}
};
var covid19_datas_InternalAddLatLong = function(place,area9,latitude,longitude,east,north) {
	this.place = place;
	this.area9 = area9;
	this.latitude = latitude;
	this.longitude = longitude;
	this.east = east;
	this.north = north;
};
covid19_datas_InternalAddLatLong.__name__ = true;
var covid19_datas_InternalArea9 = function(area9,place) {
	this.area9 = area9;
	this.place = place;
};
covid19_datas_InternalArea9.__name__ = true;
var covid19_datas_InternalDayCounter = function(day,month,year) {
	this.day = day;
	this.month = month;
	this.year = year;
};
covid19_datas_InternalDayCounter.__name__ = true;
var covid19_datas_InternalLongLatAreas = function(admin_area,county,latitude,longitude,postcodes,active_postcodes,population,households,east,north) {
	this.admin_area = admin_area;
	this.county = county;
	this.latitude = latitude;
	this.longitude = longitude;
	this.postcodes = postcodes;
	this.active_postcodes = active_postcodes;
	this.population = population;
	this.households = households;
	this.east = east;
	this.north = north;
};
covid19_datas_InternalLongLatAreas.__name__ = true;
var covid19_datas_InternalStatsC19 = function(date,country,areaCode,area,totalCases) {
	this.date = datetime_utils_DateTimeUtils.fromString(date);
	this.country = country;
	this.areaCode = areaCode;
	this.area = area;
	this.totalCases = totalCases;
};
covid19_datas_InternalStatsC19.__name__ = true;
var covid19_datas__$StatsC19Arr_StatsC19Arr_$Impl_$ = {};
covid19_datas__$StatsC19Arr_StatsC19Arr_$Impl_$.__name__ = true;
covid19_datas__$StatsC19Arr_StatsC19Arr_$Impl_$.getByDate = function(this1,dayCounter) {
	var arr = [];
	var j = 0;
	var _g = 0;
	while(_g < this1.length) {
		var stat = this1[_g];
		++_g;
		var date = stat.date;
		var tmp;
		var days = ((date - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date)) / 86400 | 0) + 1;
		if(datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date)) == dayCounter.day) {
			var days1 = ((date - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date)) / 86400 | 0) + 1;
			tmp = datetime_utils_DateTimeMonthUtils.getMonth(days1,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date)) == dayCounter.month;
		} else {
			tmp = false;
		}
		if(tmp && datetime__$DateTime_DateTime_$Impl_$.getYear(date) == dayCounter.year) {
			arr[j++] = stat;
		}
	}
	return arr;
};
var covid19_visual_UKcanvasPlot = function(surface) {
	this.colorChange = 0.0454545454545454558;
	this.sizeScale = 0.0555555555555555525;
	this.alpha = 0.3;
	this.surface = surface;
	var this1 = new latLongUK_helpers_InternalPlot(0.0005,53.,60.,500);
	this.plotting = this1;
};
covid19_visual_UKcanvasPlot.__name__ = true;
covid19_visual_UKcanvasPlot.prototype = {
	plot: function(eastNorth,cases,colors) {
		var size = cases * this.sizeScale;
		var fillColor = colors[Math.round(cases * this.colorChange)];
		var this1 = this.plotting;
		var p = new latLongUK_helpers_XY(eastNorth.east * this1.scale + this1.dx,this1.negY - eastNorth.north * this1.scale + this1.dy);
		var radius = size * 0.5;
		var fillAlpha = this.alpha;
		var ax = p.x;
		var ay = p.y;
		var theta = Math.PI / 2;
		var step = Math.PI * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var this2 = this.surface;
		if(fillAlpha != null && fillAlpha != 1.0) {
			var r = fillColor >> 16 & 255;
			var g = fillColor >> 8 & 255;
			var b = fillColor & 255;
			this2.me.fillStyle = "rgba(" + r + "," + g + "," + b + "," + fillAlpha + ")";
		} else {
			var tmp = StringTools.hex(fillColor,6);
			this2.me.fillStyle = "#" + tmp;
		}
		this2.me.beginPath();
		var this3 = this.surface;
		this3.me.lineWidth = 2.;
		var r1 = 255;
		var g1 = 165;
		var b1 = 0;
		this3.me.strokeStyle = "rgba(" + r1 + "," + g1 + "," + b1 + "," + 0. + ")";
		var _g = 0;
		while(_g < 36) {
			var i = _g++;
			bx = ax + radius * Math.sin(theta);
			by = ay + radius * Math.cos(theta);
			theta += step;
			cx = ax + radius * Math.sin(theta);
			cy = ay + radius * Math.cos(theta);
			var this4 = this.surface;
			this4.x = ax;
			this4.y = ay;
			this4.me.moveTo(ax,ay);
			var this5 = this.surface;
			this5.x = bx;
			this5.y = by;
			this5.me.lineTo(bx,by);
			var this6 = this.surface;
			this6.x = cx;
			this6.y = cy;
			this6.me.lineTo(cx,cy);
			var this7 = this.surface;
			this7.x = ax;
			this7.y = ay;
			this7.me.lineTo(ax,ay);
		}
		var this8 = this.surface;
		this8.me.stroke();
		this8.me.closePath();
		this8.me.fill();
	}
};
var datetime__$DateTime_DateTime_$Impl_$ = {};
datetime__$DateTime_DateTime_$Impl_$.__name__ = true;
datetime__$DateTime_DateTime_$Impl_$.getYear = function(this1) {
	var cquads = (this1 / 12622780800.0 | 0) * 12622780800.0;
	var centuries = ((this1 - cquads) / 3155673600.0 | 0) * 3155673600.0;
	if(centuries > 9467020800.) {
		centuries -= 3155673600.0;
	}
	var quads = ((this1 - cquads - centuries) / 126230400.0 | 0) * 126230400.0;
	var years = (this1 - cquads - centuries - quads) / 31536000 | 0;
	return (cquads / 12622780800.0 | 0) * 400 + (centuries / 3155673600.0 | 0) * 100 + (quads / 126230400.0 | 0) * 4 + (years == 4 ? years : years + 1);
};
datetime__$DateTime_DateTime_$Impl_$.yearStart = function(this1) {
	var cquads = (this1 / 12622780800.0 | 0) * 12622780800.0;
	var centuries = ((this1 - cquads) / 3155673600.0 | 0) * 3155673600.0;
	if(centuries > 9467020800.) {
		centuries -= 3155673600.0;
	}
	var quads = ((this1 - cquads - centuries) / 126230400.0 | 0) * 126230400.0;
	var years = (this1 - cquads - centuries - quads) / 31536000 | 0;
	if(years == 4) {
		--years;
	}
	return cquads + centuries + quads + years * 31536000 - 62135596800.0;
};
datetime__$DateTime_DateTime_$Impl_$.isLeapYear = function(this1) {
	var year = datetime__$DateTime_DateTime_$Impl_$.getYear(this1);
	if(year % 4 == 0) {
		if(year % 100 == 0) {
			return year % 400 == 0;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
var datetime_utils_DateTimeMonthUtils = function() { };
datetime_utils_DateTimeMonthUtils.__name__ = true;
datetime_utils_DateTimeMonthUtils.days = function(month,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(month == 1) {
		return 31;
	} else if(month == 2 && isLeapYear) {
		return 29;
	} else if(month == 2) {
		return 28;
	} else if(month == 3) {
		return 31;
	} else if(month == 4) {
		return 30;
	} else if(month == 5) {
		return 31;
	} else if(month == 6) {
		return 30;
	} else if(month == 7) {
		return 31;
	} else if(month == 8) {
		return 31;
	} else if(month == 9) {
		return 30;
	} else if(month == 10) {
		return 31;
	} else if(month == 11) {
		return 30;
	} else {
		return 31;
	}
};
datetime_utils_DateTimeMonthUtils.getMonth = function(days,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(days < 32) {
		return 1;
	} else if(isLeapYear) {
		if(days < 61) {
			return 2;
		} else if(days < 92) {
			return 3;
		} else if(days < 122) {
			return 4;
		} else if(days < 153) {
			return 5;
		} else if(days < 183) {
			return 6;
		} else if(days < 214) {
			return 7;
		} else if(days < 245) {
			return 8;
		} else if(days < 275) {
			return 9;
		} else if(days < 306) {
			return 10;
		} else if(days < 336) {
			return 11;
		} else {
			return 12;
		}
	} else if(days < 60) {
		return 2;
	} else if(days < 91) {
		return 3;
	} else if(days < 121) {
		return 4;
	} else if(days < 152) {
		return 5;
	} else if(days < 182) {
		return 6;
	} else if(days < 213) {
		return 7;
	} else if(days < 244) {
		return 8;
	} else if(days < 274) {
		return 9;
	} else if(days < 305) {
		return 10;
	} else if(days < 335) {
		return 11;
	} else {
		return 12;
	}
};
datetime_utils_DateTimeMonthUtils.getMonthDay = function(days,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(days < 32) {
		return days;
	} else if(isLeapYear) {
		if(days < 61) {
			return days - 31;
		} else if(days < 92) {
			return days - 60;
		} else if(days < 122) {
			return days - 91;
		} else if(days < 153) {
			return days - 121;
		} else if(days < 183) {
			return days - 152;
		} else if(days < 214) {
			return days - 182;
		} else if(days < 245) {
			return days - 213;
		} else if(days < 275) {
			return days - 244;
		} else if(days < 306) {
			return days - 274;
		} else if(days < 336) {
			return days - 305;
		} else {
			return days - 335;
		}
	} else if(days < 60) {
		return days - 31;
	} else if(days < 91) {
		return days - 59;
	} else if(days < 121) {
		return days - 90;
	} else if(days < 152) {
		return days - 120;
	} else if(days < 182) {
		return days - 151;
	} else if(days < 213) {
		return days - 181;
	} else if(days < 244) {
		return days - 212;
	} else if(days < 274) {
		return days - 243;
	} else if(days < 305) {
		return days - 273;
	} else if(days < 335) {
		return days - 304;
	} else {
		return days - 334;
	}
};
datetime_utils_DateTimeMonthUtils.toSeconds = function(month,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	return 86400 * (month == 1 ? 0 : isLeapYear ? month == 2 ? 31 : month == 3 ? 60 : month == 4 ? 91 : month == 5 ? 121 : month == 6 ? 152 : month == 7 ? 182 : month == 8 ? 213 : month == 9 ? 244 : month == 10 ? 274 : month == 11 ? 305 : 335 : month == 2 ? 31 : month == 3 ? 59 : month == 4 ? 90 : month == 5 ? 120 : month == 6 ? 151 : month == 7 ? 181 : month == 8 ? 212 : month == 9 ? 243 : month == 10 ? 273 : month == 11 ? 304 : 334);
};
var datetime_utils_DateTimeUtils = function() { };
datetime_utils_DateTimeUtils.__name__ = true;
datetime_utils_DateTimeUtils.fromString = function(str) {
	if(str.length == 10 || str.charCodeAt(10) == 32) {
		return datetime_utils_DateTimeUtils.parse(str);
	} else if(str.charCodeAt(10) == 84) {
		return datetime_utils_DateTimeUtils.fromIsoString(str);
	} else {
		throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD` or `YYYY-MM-DDThh:mm:ss[.SSS]Z`");
	}
};
datetime_utils_DateTimeUtils.parse = function(str) {
	var ylength = str.indexOf("-");
	if(ylength < 1 || str.length - ylength != 6 && str.length - ylength != 15) {
		throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD`");
	}
	if(str.length - ylength == 6) {
		str += " 00:00:00";
	}
	var year = Std.parseInt(HxOverrides.substr(str,0,ylength));
	var month = Std.parseInt(HxOverrides.substr(str,ylength + 1,2));
	var day = Std.parseInt(HxOverrides.substr(str,ylength + 4,2));
	var hour = Std.parseInt(HxOverrides.substr(str,ylength + 7,2));
	var minute = Std.parseInt(HxOverrides.substr(str,ylength + 10,2));
	var second = Std.parseInt(HxOverrides.substr(str,ylength + 13,2));
	if(year == null || month == null || day == null || hour == null || minute == null || second == null) {
		throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD`");
	}
	var year1 = year;
	var month1 = month;
	var day1 = day;
	var hour1 = hour;
	var minute1 = minute;
	var second1 = second;
	if(second1 == null) {
		second1 = 0;
	}
	if(minute1 == null) {
		minute1 = 0;
	}
	if(hour1 == null) {
		hour1 = 0;
	}
	if(day1 == null) {
		day1 = 1;
	}
	if(month1 == null) {
		month1 = 1;
	}
	if(year1 == null) {
		year1 = 1970;
	}
	var this1 = datetime_utils_DateTimeUtils.yearToStamp(year1) + datetime_utils_DateTimeMonthUtils.toSeconds(month1,year1 % 4 == 0 && (year1 % 100 == 0 ? year1 % 400 == 0 : true)) + (day1 - 1) * 86400 + hour1 * 3600 + minute1 * 60 + second1 - 62135596800.0 + 62135596800.0;
	return this1;
};
datetime_utils_DateTimeUtils.fromIsoString = function(str) {
	var dotPos = str.indexOf(".");
	var zPos = str.indexOf("Z");
	if(str.charCodeAt(str.length - 1) != 90) {
		throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Not an ISO 8601 UTC/Zulu string: Z not found.");
	}
	if(str.length > 20) {
		if(str.charCodeAt(19) != 46) {
			throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Not an ISO 8601 string: Millisecond specification erroneous.");
		}
		if(str.charCodeAt(23) != 90) {
			throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Not an ISO 8601 string: Timezone specification erroneous.");
		}
	}
	return datetime_utils_DateTimeUtils.parse(HxOverrides.substr(str,0,10) + " " + HxOverrides.substr(str,11,8));
};
datetime_utils_DateTimeUtils.yearToStamp = function(year) {
	--year;
	var cquads = year / 400 | 0;
	var quads = (year - cquads * 400) / 4 | 0;
	var excessDays = quads / 25 | 0;
	return cquads * 12622780800.0 + quads * 126230400.0 - excessDays * 86400 + (year - cquads * 400 - quads * 4) * 31536000;
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = true;
haxe_http_HttpBase.prototype = {
	onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpJs.__name__ = true;
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				s = null;
			}
			if(s == 0 && typeof(window) != "undefined") {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var onreadystatechange1 = haxe_io_Bytes.ofData(r.response);
				_gthis.success(onreadystatechange1);
			} else if(s == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				_gthis.responseBytes = haxe_io_Bytes.ofData(r.response);
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					_gthis.responseBytes = haxe_io_Bytes.ofData(r.response);
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postBytes;
		var _g1 = this.postData;
		if(_g1 == null) {
			if(_g == null) {
				uri = null;
			} else {
				var bytes = _g;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g == null) {
			var str = _g1;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g2 = 0;
			var _g3 = this.params;
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				if(uri == null) {
					uri = "";
				} else {
					uri = Std.string(uri) + "&";
				}
				var s1 = p.name;
				var value = Std.string(uri) + encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri = value + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + Std.string(uri),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( e2 ) {
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			this.req = null;
			this.onError(e3.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g21 = 0;
		var _g31 = this.headers;
		while(_g21 < _g31.length) {
			var h1 = _g31[_g21];
			++_g21;
			r.setRequestHeader(h1.name,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var htmlHelper_canvas_CanvasPlus = function(me,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.me = me;
};
htmlHelper_canvas_CanvasPlus.__name__ = true;
var htmlHelper_tools_AnimateTimer = function() { };
htmlHelper_tools_AnimateTimer.__name__ = true;
htmlHelper_tools_AnimateTimer.loop = function(tim) {
	window.requestAnimationFrame(htmlHelper_tools_AnimateTimer.loop);
	if(htmlHelper_tools_AnimateTimer.onFrame != null) {
		htmlHelper_tools_AnimateTimer.onFrame(htmlHelper_tools_AnimateTimer.counter);
	}
	htmlHelper_tools_AnimateTimer.counter++;
	return true;
};
var htmlHelper_tools_DivertTrace = function(left,d) {
	if(left == null) {
		left = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	this.divertTrace(left,d);
};
htmlHelper_tools_DivertTrace.__name__ = true;
htmlHelper_tools_DivertTrace.prototype = {
	divertTrace: function(left,d) {
		if(d == null) {
			var doc = window.document;
			this.traceDiv = doc.createElement("div");
			doc.body.appendChild(this.traceDiv);
			var dom = this.traceDiv;
			var style = dom.style;
			style.position = "absolute";
			style.top = "0px";
			style.left = (left == null ? "null" : "" + left) + "px";
			style.height = "500px";
			style.width = "500px";
			style.zIndex = "99";
			style.overflow = "auto";
		} else {
			this.traceDiv = d;
		}
		haxe_Log.trace = $bind(this,this.myTrace);
	}
	,myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
};
var htmlHelper_tools_StringCodeIterator = function(str_,pos_) {
	if(pos_ == null) {
		pos_ = 0;
	}
	this.str = "";
	this.pos = pos_;
	this.str = str_;
	this.length = this.str.length;
	this.b = new StringBuf();
};
htmlHelper_tools_StringCodeIterator.__name__ = true;
var htmlHelper_tools_TextLoader = function(fileNames,loaded_,itemLoaded_) {
	this.reload(fileNames,loaded_,itemLoaded_);
};
htmlHelper_tools_TextLoader.__name__ = true;
htmlHelper_tools_TextLoader.prototype = {
	reload: function(fileNames,loaded_,itemLoaded_) {
		this.contents = new haxe_ds_StringMap();
		this.loaded = loaded_;
		if(itemLoaded_ != null) {
			this.itemLoaded = itemLoaded_;
		}
		this.count = fileNames.length;
		var _g = 0;
		while(_g < fileNames.length) {
			var file = fileNames[_g];
			++_g;
			this.load(file);
		}
	}
	,load: function(file) {
		var r = new haxe_http_HttpJs(file);
		r.onError = js_Browser.alert;
		var f = $bind(this,this.store);
		var name = file.split("/").pop();
		r.onData = function(data) {
			f(name,data);
		};
		r.request(false);
	}
	,store: function(name,data) {
		this.count--;
		if(this.itemLoaded != null) {
			this.itemLoaded(name);
		}
		var _this = this.contents;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,data);
		} else {
			_this.h[name] = data;
		}
		if(this.count == 0) {
			this.loaded();
		}
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
js_Browser.alert = function(v) {
	window.alert(Std.string(v));
};
var latLongUK_EastNorth = function(east,north) {
	this.east = east;
	this.north = north;
};
latLongUK_EastNorth.__name__ = true;
var latLongUK_LatLong = function(lat,long) {
	this.lat = lat;
	this.long = long;
};
latLongUK_LatLong.__name__ = true;
var latLongUK_LatLongUK = function() { };
latLongUK_LatLongUK.__name__ = true;
latLongUK_LatLongUK.ll_to_osOld = function(latLong) {
	return latLongUK_LatLongUK.ll_to_os(latLong,6377563.396,6356256.909);
};
latLongUK_LatLongUK.ll_to_os = function(latLong,a,b) {
	var phi = latLong.lat * Math.PI / 180;
	var lam = latLong.long * Math.PI / 180;
	var a2 = Math.pow(a,2);
	var e2 = (a2 - Math.pow(b,2)) / a2;
	var rho = a * 0.9996012717 * (1 - e2) * Math.pow(1 - Math.pow(e2 * Math.sin(phi),2),-1.5);
	var nu = a * 0.9996012717 / Math.sqrt(1 - e2 * Math.pow(Math.sin(phi),2));
	var eta2 = nu / rho - 1;
	var n = (a - b) / (a + b);
	var n2 = Math.pow(n,2);
	var n3 = n * n2;
	var dphi = phi - latLongUK_LatLongUK.phi0;
	var sphi = phi + latLongUK_LatLongUK.phi0;
	var m = b * 0.9996012717 * ((1 + n + 1.25 * (n2 + n3)) * dphi - (3 * n + 3 * n2 + 2.625 * n3) * Math.sin(dphi) * Math.cos(sphi) + 1.875 * (n2 + n3) * Math.sin(2 * dphi) * Math.cos(2 * sphi) - 1.45833333333333326 * n3 * Math.sin(3 * dphi) * Math.cos(3 * sphi));
	var sin_phi = Math.sin(phi);
	var cos_phi = Math.cos(phi);
	var cos_phi2 = Math.pow(cos_phi,2);
	var cos_phi3 = cos_phi2 * cos_phi;
	var cos_phi5 = cos_phi3 * cos_phi2;
	var tan_phi2 = Math.pow(Math.tan(phi),2);
	var tan_phi4 = tan_phi2 * tan_phi2;
	var a1 = m + (-100000.);
	var a21 = nu / 2 * sin_phi * cos_phi;
	var a3 = nu / 24 * sin_phi * cos_phi3 * (5 - tan_phi2 + 9 * eta2);
	var a4 = nu / 720 * sin_phi * cos_phi5 * (61 - 58 * tan_phi2 + tan_phi4);
	var b1 = nu * cos_phi;
	var b2 = nu / 6 * cos_phi3 * (nu / rho - tan_phi2);
	var b3 = nu / 120 * cos_phi5 * (5 - 18 * tan_phi2 + tan_phi4 + eta2 * (14 - 58 * tan_phi2));
	var lml0 = lam - latLongUK_LatLongUK.lambda0;
	var lml02 = Math.pow(lml0,2);
	var n1 = a1 + lml02 * (a21 + lml02 * (a3 + a4 * lml02));
	var e = 400000. + lml0 * (b1 + lml02 * (b2 + b3 * lml02));
	return new latLongUK_EastNorth(e,n1);
};
var latLongUK_helpers_InternalPlot = function(scale,dx,dy,negY) {
	this.scale = scale;
	this.dx = dx;
	this.dy = dy;
	this.negY = negY;
};
latLongUK_helpers_InternalPlot.__name__ = true;
var latLongUK_helpers_XY = function(x,y) {
	this.x = x;
	this.y = y;
};
latLongUK_helpers_XY.__name__ = true;
var uk_CanvasUK = function(surface) {
	this.alpha = 1.;
	this.scaleY = 1.;
	this.scaleX = 1.;
	this.seaColor = 11919863;
	this.grassColor = 13888183;
	this.borderColor = 9023938;
	this.h = 550;
	this.w = 400;
	this.dy = 10;
	this.dx = 10;
	this.surface = surface;
};
uk_CanvasUK.__name__ = true;
uk_CanvasUK.prototype = {
	draw: function() {
		var shapes = [uk_UK.shape1,uk_UK.shape2,uk_UK.shape3,uk_UK.shape4,uk_UK.shape5,uk_UK.shape6,uk_UK.shape7,uk_UK.shape8,uk_UK.shape9,uk_UK.shape10,uk_UK.shape11,uk_UK.shape12,uk_UK.shape13,uk_UK.shape14,uk_UK.shape15,uk_UK.shape16,uk_UK.shape17,uk_UK.shape18,uk_UK.shape19,uk_UK.shape20,uk_UK.shape21,uk_UK.shape22];
		var this1 = this.surface;
		var col = this.seaColor;
		var alpha = this.alpha;
		if(alpha != null && alpha != 1.0) {
			var r = col >> 16 & 255;
			var g = col >> 8 & 255;
			var b = col & 255;
			this1.me.fillStyle = "rgba(" + r + "," + g + "," + b + "," + alpha + ")";
		} else {
			var tmp = StringTools.hex(col,6);
			this1.me.fillStyle = "#" + tmp;
		}
		this1.me.beginPath();
		var this2 = this.surface;
		var col1 = this.borderColor;
		var alpha1 = this.alpha;
		this2.me.lineWidth = 1.;
		if(alpha1 != null && alpha1 != 1.0) {
			var r1 = col1 >> 16 & 255;
			var g1 = col1 >> 8 & 255;
			var b1 = col1 & 255;
			this2.me.strokeStyle = "rgba(" + r1 + "," + g1 + "," + b1 + "," + alpha1 + ")";
		} else {
			var tmp1 = StringTools.hex(col1,6);
			this2.me.strokeStyle = "#" + tmp1;
		}
		var this3 = this.surface;
		var x = this.dx;
		var y = this.dy;
		this3.x = x;
		this3.y = y;
		this3.me.moveTo(x,y);
		var this4 = this.surface;
		var x1 = this.dx + this.w * this.scaleX;
		var y1 = this.dy;
		this4.x = x1;
		this4.y = y1;
		this4.me.lineTo(x1,y1);
		var this5 = this.surface;
		var x2 = this.dx + this.w * this.scaleX;
		var y2 = this.dy + this.h * this.scaleY;
		this5.x = x2;
		this5.y = y2;
		this5.me.lineTo(x2,y2);
		var this6 = this.surface;
		var x3 = this.dx;
		var y3 = this.dy + this.h * this.scaleY;
		this6.x = x3;
		this6.y = y3;
		this6.me.lineTo(x3,y3);
		var this7 = this.surface;
		this7.me.stroke();
		this7.me.closePath();
		this7.me.fill();
		this.dx += 20;
		this.dy += 20;
		var _g = 0;
		while(_g < shapes.length) {
			var si = shapes[_g];
			++_g;
			var this8 = this.surface;
			var col2 = this.grassColor;
			var alpha2 = this.alpha;
			if(alpha2 != null && alpha2 != 1.0) {
				var r2 = col2 >> 16 & 255;
				var g2 = col2 >> 8 & 255;
				var b2 = col2 & 255;
				this8.me.fillStyle = "rgba(" + r2 + "," + g2 + "," + b2 + "," + alpha2 + ")";
			} else {
				var tmp2 = StringTools.hex(col2,6);
				this8.me.fillStyle = "#" + tmp2;
			}
			this8.me.beginPath();
			var this9 = this.surface;
			var col3 = this.borderColor;
			var alpha3 = this.alpha;
			this9.me.lineWidth = 1.;
			if(alpha3 != null && alpha3 != 1.0) {
				var r3 = col3 >> 16 & 255;
				var g3 = col3 >> 8 & 255;
				var b3 = col3 & 255;
				this9.me.strokeStyle = "rgba(" + r3 + "," + g3 + "," + b3 + "," + alpha3 + ")";
			} else {
				var tmp3 = StringTools.hex(col3,6);
				this9.me.strokeStyle = "#" + tmp3;
			}
			var this10 = this.surface;
			var x4 = this.dx + si[0] * this.scaleX;
			var y4 = this.dy + 500 * this.scaleY - si[1] * this.scaleY;
			this10.x = x4;
			this10.y = y4;
			this10.me.moveTo(x4,y4);
			var _g1 = 1;
			var _g11 = Math.round(si.length / 2);
			while(_g1 < _g11) {
				var i = _g1++;
				var this11 = this.surface;
				var x5 = this.dx + si[i * 2] * this.scaleX;
				var y5 = this.dy + 500 * this.scaleY - si[i * 2 + 1] * this.scaleY;
				this11.x = x5;
				this11.y = y5;
				this11.me.lineTo(x5,y5);
			}
			var this12 = this.surface;
			this12.me.stroke();
			this12.me.closePath();
			this12.me.fill();
		}
	}
};
var uk_UK = function() { };
uk_UK.__name__ = true;
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
htmlHelper_tools_AnimateTimer.counter = 0;
latLongUK_LatLongUK.phi0 = 49 * Math.PI / 180;
latLongUK_LatLongUK.lambda0 = -2 * Math.PI / 180;
uk_UK.shape1 = [46.9,497.5,47.0,496.1,46.9,496.1,44.5,494.4,44.5,494.4,39.1,490.2,39.0,490.4,38.0,489.2,38.0,489.1,37.9,487.9,36.3,487.8,35.3,486.6,35.2,486.6,34.2,486.8,34.0,487.1,33.4,486.9,33.4,486.6,33.1,485.9,33.0,485.9,32.0,485.7,32.0,485.6,30.2,484.4,29.1,484.4,28.8,483.2,28.0,482.8,28.1,482.1,28.2,482.1,28.9,480.4,28.9,480.2,30.4,478.2,28.4,479.3,28.3,479.5,27.6,480.1,26.9,481.7,26.1,481.8,25.9,480.8,25.9,480.7,26.4,479.1,26.5,479.0,26.4,478.1,26.1,478.1,25.4,478.4,24.6,478.4,24.6,478.5,24.4,479.8,24.0,479.8,23.5,478.8,22.8,478.8,22.7,478.8,22.5,479.4,22.4,479.4,21.6,479.3,21.6,479.4,21.6,480.1,20.9,479.9,20.3,478.7,20.3,478.6,20.1,477.1,20.2,476.9,20.4,476.2,20.7,476.4,20.9,476.2,20.4,476.2,18.6,476.2,18.5,476.0,18.9,474.9,18.8,474.9,18.4,473.9,17.6,473.1,17.6,472.8,17.8,471.9,18.4,471.4,18.8,469.1,19.2,468.4,19.6,468.2,19.8,468.0,20.2,467.8,20.8,466.2,20.9,466.2,20.6,465.6,19.6,465.9,19.3,465.8,18.9,466.6,18.4,466.9,18.3,466.9,17.0,467.0,16.4,466.1,16.8,464.9,18.1,464.7,18.6,463.4,19.1,463.5,19.2,463.5,19.6,462.3,19.6,462.1,20.2,462.1,20.2,461.9,20.9,461.2,23.1,461.2,23.1,461.4,24.8,460.9,24.7,460.7,27.1,459.8,27.0,459.5,27.6,458.4,26.8,458.1,26.1,458.7,24.8,458.4,24.7,458.6,23.6,457.9,23.4,457.2,23.4,457.2,24.8,456.4,25.4,456.2,25.3,455.9,23.4,455.8,23.2,456.1,22.1,455.4,21.9,455.1,21.8,454.4,21.4,454.2,21.2,454.1,20.2,452.4,19.9,452.4,19.9,454.1,19.1,454.4,17.9,454.1,17.9,454.1,17.8,452.9,17.9,452.6,19.0,452.1,20.2,450.4,23.2,446.9,23.4,446.9,23.9,447.7,23.9,447.8,26.4,450.1,27.2,451.9,28.1,452.1,29.8,452.1,29.4,453.2,30.4,452.9,31.2,453.1,31.4,454.4,29.9,455.8,28.9,456.6,29.1,457.6,30.2,457.2,30.2,457.1,31.8,457.0,31.9,456.9,32.2,455.8,33.1,454.8,34.0,454.8,34.4,455.2,34.5,456.1,33.5,456.6,33.6,457.8,32.8,458.5,32.5,458.9,32.6,459.0,33.5,459.0,30.8,463.8,31.1,464.0,31.1,463.9,34.1,459.4,35.7,458.8,34.5,461.4,36.5,458.9,37.0,458.9,37.2,459.1,38.1,459.2,37.9,460.3,38.9,459.8,40.4,460.4,40.5,461.6,40.9,461.6,40.9,461.9,41.0,463.7,41.1,463.9,42.0,464.3,42.0,464.4,42.5,464.2,43.7,464.8,43.8,464.9,44.0,466.1,44.1,466.2,43.6,467.5,43.5,470.2,43.7,470.4,42.9,471.6,41.9,471.6,41.7,472.3,43.7,472.7,43.8,472.9,44.0,474.1,43.6,474.9,43.5,476.3,43.6,476.3,44.4,476.1,44.5,476.3,45.0,476.6,45.1,476.7,45.5,477.2,45.6,477.4,46.2,477.4,46.7,476.4,46.8,476.2,47.5,475.8,47.6,475.9,48.8,475.9,48.9,476.1,49.2,476.8,49.2,476.9,50.5,477.5,50.7,478.1,50.8,478.2,51.2,479.8,51.6,480.4,51.6,481.1,50.5,481.0,49.2,480.4,49.0,479.6,47.5,478.7,46.9,478.0,45.7,478.0,45.7,478.1,45.0,478.6,45.1,478.8,44.4,479.1,44.0,478.6,43.8,478.8,44.2,479.2,45.2,479.8,45.4,479.8,45.4,481.2,46.6,481.4,46.8,482.9,47.0,483.0,48.0,483.1,48.1,484.4,48.1,484.5,48.6,484.6,49.5,486.0,49.6,485.9,50.5,486.2,50.6,486.8,49.8,486.9,49.1,487.7,48.9,488.5,49.1,488.6,49.9,490.6,50.5,491.3,50.5,491.8,50.5,491.9,49.6,493.0,49.9,494.1,49.6,494.9,48.7,495.8,48.8,496.5,47.7,497.4,46.9,497.5];
uk_UK.shape2 = [17.5,448.1,15.6,447.6,14.5,445.8,15.1,445.1,14.5,444.8,14.4,444.8,13.6,444.9,13.5,445.0,13.2,444.4,13.3,444.0,13.4,444.0,13.9,443.7,13.7,443.2,11.5,443.2,12.1,445.2,11.6,445.2,10.6,444.1,10.6,443.2,10.1,443.1,9.6,443.4,5.7,443.1,5.5,443.1,5.8,441.7,5.0,440.9,5.0,440.9,4.8,439.6,3.6,439.8,3.5,439.6,4.0,438.9,4.2,438.8,6.3,436.7,6.5,436.6,7.2,436.9,9.7,433.9,9.5,433.8,9.8,432.1,9.8,432.1,9.3,431.3,8.6,431.2,8.3,430.9,8.4,430.9,8.5,429.3,8.7,428.9,9.2,427.9,9.2,427.9,10.2,427.4,10.3,427.3,9.3,426.4,9.2,426.6,8.6,426.2,8.6,425.9,7.8,425.6,8.7,424.1,8.8,420.2,8.1,419.6,7.7,416.9,8.7,409.6,9.2,408.2,9.3,408.2,10.1,407.7,11.6,407.9,11.7,407.9,13.1,407.9,13.3,407.6,14.2,407.3,14.7,407.8,15.5,408.6,14.2,409.8,13.8,409.9,12.9,410.5,13.9,411.1,13.7,413.4,13.9,413.6,12.7,415.2,13.3,415.2,13.3,415.4,13.8,415.6,14.1,416.2,14.2,416.2,14.1,417.7,14.9,418.6,14.9,418.7,15.6,418.6,15.9,420.4,15.2,420.9,15.1,421.7,15.2,421.8,14.6,422.2,14.5,422.3,14.6,422.3,14.7,422.4,15.3,422.9,15.3,423.1,13.8,424.0,13.4,425.1,13.1,425.1,11.9,426.2,11.9,426.4,13.2,426.2,14.1,425.9,14.7,425.5,15.8,425.5,15.8,425.8,16.1,426.6,15.5,427.2,15.7,428.9,14.6,429.1,14.7,429.2,15.3,430.1,15.4,430.4,14.9,430.5,14.8,430.9,14.8,430.9,14.8,431.1,15.9,431.0,15.9,430.9,16.4,431.0,17.8,432.7,17.9,432.7,18.0,436.1,19.1,438.4,19.1,438.6,17.3,438.9,17.3,439.0,17.4,439.8,17.6,439.9,18.1,439.4,19.4,439.6,19.8,440.9,19.8,440.9,21.2,442.9,18.5,443.7,17.2,442.8,17.2,444.2,17.1,444.3,16.4,444.5,16.6,445.7,17.5,446.8,17.6,447.9,17.5,448.1];
uk_UK.shape3 = [56.5,438.1,56.5,437.4,53.0,427.4,53.2,427.1,53.2,423.4,54.0,423.0,54.0,422.0,54.6,421.9,56.5,423.2,56.9,424.4,55.1,428.8,58.2,437.8,58.2,438.1,56.5,438.1];
uk_UK.shape4 = [47.4,403.9,45.6,405.1,43.5,404.9,40.5,402.0,43.2,399.6,43.4,398.5,43.6,398.6,45.8,397.2,47.4,399.1,48.0,401.5,48.1,401.6,47.4,403.9];
uk_UK.shape5 = [53.6,379.0,52.0,380.3,48.5,379.1,48.5,377.2,47.1,377.5,45.5,377.2,45.0,375.5,46.2,375.4,45.7,374.4,44.9,374.3,44.4,372.9,45.1,372.5,45.4,372.2,47.1,371.9,48.2,372.1,48.4,372.1,51.4,370.4,51.5,370.2,50.3,369.9,48.9,370.7,45.6,370.7,45.7,369.6,45.8,369.6,50.4,368.1,51.6,368.8,51.9,369.3,51.9,369.4,52.0,369.4,56.0,370.1,56.3,369.8,54.0,367.7,52.0,367.7,50.9,365.3,51.0,365.2,49.4,364.1,48.8,362.2,49.9,361.6,50.0,361.7,51.5,362.2,51.5,362.4,53.4,362.6,53.5,362.5,55.2,364.1,56.0,363.0,53.3,361.4,50.9,361.0,50.0,360.4,48.5,361.3,47.6,361.3,47.6,359.8,46.8,360.9,45.9,361.4,43.8,361.0,43.7,361.0,43.5,358.6,42.8,358.1,42.8,357.9,44.8,356.7,44.8,356.4,46.5,356.4,46.5,356.4,46.9,356.0,47.9,357.2,47.9,357.4,50.0,357.6,50.0,357.4,51.0,357.3,52.5,358.2,52.6,358.1,53.1,358.3,53.8,358.1,54.5,357.8,54.6,357.9,56.8,359.5,56.8,359.6,58.6,359.7,58.6,359.9,59.5,361.1,59.6,360.9,60.1,361.9,61.0,361.8,60.9,361.1,60.0,359.6,61.5,359.0,63.6,360.1,66.8,362.8,66.3,363.8,67.3,363.9,68.0,364.9,67.3,365.9,68.2,366.4,68.0,367.9,67.0,367.7,66.9,367.8,65.3,369.8,64.5,369.6,63.4,370.9,63.3,371.1,62.2,371.4,62.1,371.2,60.8,372.1,60.5,372.1,58.4,371.9,58.3,371.9,57.1,373.1,57.1,373.2,56.0,375.9,56.0,376.0,54.0,377.7,53.6,379.0];
uk_UK.shape6 = [40.8,380.6,40.9,382.6,39.2,382.1,34.5,377.1,34.3,376.9,32.0,374.9,31.9,374.8,32.5,374.5,33.8,375.5,33.8,375.6,36.3,375.6,39.2,377.9,39.4,377.9,40.8,380.6];
uk_UK.shape7 = [11.7,402.8,11.2,403.4,9.1,401.4,7.8,402.9,8.3,404.2,7.1,405.4,7.2,403.7,6.2,402.5,4.8,402.4,5.0,401.4,5.2,401.2,4.4,399.8,3.5,399.3,3.0,397.3,4.5,394.6,5.0,394.0,5.5,393.9,5.5,394.2,5.5,396.6,5.8,396.6,6.2,397.9,6.0,397.9,6.3,398.2,6.4,398.2,7.0,398.1,7.1,398.2,8.6,399.7,8.9,400.6,11.7,402.8];
uk_UK.shape8 = [1.6,390.5,1.4,391.1,0.4,390.6,0.2,390.6,0.1,388.1,0.0,388.1,0.3,387.8,1.4,387.8,1.4,389.7,1.6,390.5];
uk_UK.shape9 = [7.5,448.1,15.6,447.6,14.5,445.8,15.1,445.1,14.5,444.8,14.4,444.8,13.6,444.9,13.5,445.0,13.2,444.4,13.3,444.0,13.4,444.0,13.9,443.7,13.7,443.2,11.5,443.2,12.1,445.2,11.6,445.2,10.6,444.1,10.6,443.2,10.1,443.1,9.6,443.4,5.7,443.1,5.5,443.1,5.8,441.7,5.0,440.9,5.0,440.9,4.8,439.6,3.6,439.8,3.5,439.6,4.0,438.9,4.2,438.8,6.3,436.7,6.5,436.6,7.2,436.9,9.7,433.9,9.5,433.8,9.8,432.1,9.8,432.1,9.3,431.3,8.6,431.2,8.3,430.9,8.4,430.9,8.5,429.3,8.7,428.9,9.2,427.9,9.2,427.9,10.2,427.4,10.3,427.3,9.3,426.4,9.2,426.6,8.6,426.2,8.6,425.9,7.8,425.6,8.7,424.1,8.8,420.2,8.1,419.6,7.7,416.9,8.7,409.6,9.2,408.2,9.3,408.2,10.1,407.7,11.6,407.9,11.7,407.9,13.1,407.9,13.3,407.6,14.2,407.3,14.7,407.8,15.5,408.6,14.2,409.8,13.8,409.9,12.9,410.5,13.9,411.1,13.7,413.4,13.9,413.6,12.7,415.2,13.3,415.2,13.3,415.4,13.8,415.6,14.1,416.2,14.2,416.2,14.1,417.7,14.9,418.6,14.9,418.7,15.6,418.6,15.9,420.4,15.2,420.9,15.1,421.7,15.2,421.8,14.6,422.2,14.5,422.3,14.6,422.3,14.7,422.4,15.3,422.9,15.3,423.1,13.8,424.0,13.4,425.1,13.1,425.1,11.9,426.2,11.9,426.4,13.2,426.2,14.1,425.9,14.7,425.5,15.8,425.5,15.8,425.8,16.1,426.6,15.5,427.2,15.7,428.9,14.6,429.1,14.7,429.2,15.3,430.1,15.4,430.4,14.9,430.5,14.8,430.9,14.8,430.9,14.8,431.1,15.9,431.0,15.9,430.9,16.4,431.0,17.8,432.7,17.9,432.7,18.0,436.1,19.1,438.4,19.1,438.6,17.3,438.9,17.3,439.0,17.4,439.8,17.6,439.9,18.1,439.4,19.4,439.6,19.8,440.9,19.8,440.9,21.2,442.9,18.5,443.7,17.2,442.8,17.2,444.2,17.1,444.3,16.4,444.5,16.6,445.7,17.5,446.8,17.6,447.9,17.5,448.1];
uk_UK.shape10 = [56.5,438.1,56.5,437.4,53.0,427.4,53.2,427.1,53.2,423.4,54.0,423.0,54.0,422.0,54.6,421.9,56.5,423.2,56.9,424.4,55.1,428.8,58.2,437.8,58.2,438.1,56.5,438.1];
uk_UK.shape11 = [47.4,403.9,45.6,405.1,43.5,404.9,40.5,402.0,43.2,399.6,43.4,398.5,43.6,398.6,45.8,397.2,47.4,399.1,48.0,401.5,48.1,401.6,47.4,403.9];
uk_UK.shape12 = [53.6,379.0,52.0,380.3,48.5,379.1,48.5,377.2,47.1,377.5,45.5,377.2,45.0,375.5,46.2,375.4,45.7,374.4,44.9,374.3,44.4,372.9,45.1,372.5,45.4,372.2,47.1,371.9,48.2,372.1,48.4,372.1,51.4,370.4,51.5,370.2,50.3,369.9,48.9,370.7,45.6,370.7,45.7,369.6,45.8,369.6,50.4,368.1,51.6,368.8,51.9,369.3,51.9,369.4,52.0,369.4,56.0,370.1,56.3,369.8,54.0,367.7,52.0,367.7,50.9,365.3,51.0,365.2,49.4,364.1,48.8,362.2,49.9,361.6,50.0,361.7,51.5,362.2,51.5,362.4,53.4,362.6,53.5,362.5,55.2,364.1,56.0,363.0,53.3,361.4,50.9,361.0,50.0,360.4,48.5,361.3,47.6,361.3,47.6,359.8,46.8,360.9,45.9,361.4,43.8,361.0,43.7,361.0,43.5,358.6,42.8,358.1,42.8,357.9,44.8,356.7,44.8,356.4,46.5,356.4,46.5,356.4,46.9,356.0,47.9,357.2,47.9,357.4,50.0,357.6,50.0,357.4,51.0,357.3,52.5,358.2,52.6,358.1,53.1,358.3,53.8,358.1,54.5,357.8,54.6,357.9,56.8,359.5,56.8,359.6,58.6,359.7,58.6,359.9,59.5,361.1,59.6,360.9,60.1,361.9,61.0,361.8,60.9,361.1,60.0,359.6,61.5,359.0,63.6,360.1,66.8,362.8,66.3,363.8,67.3,363.9,68.0,364.9,67.3,365.9,68.2,366.4,68.0,367.9,67.0,367.7,66.9,367.8,65.3,369.8,64.5,369.6,63.4,370.9,63.3,371.1,62.2,371.4,62.1,371.2,60.8,372.1,60.5,372.1,58.4,371.9,58.3,371.9,57.1,373.1,57.1,373.2,56.0,375.9,56.0,376.0,54.0,377.7,53.6,379.0];
uk_UK.shape13 = [40.8,380.6,40.9,382.6,39.2,382.1,34.5,377.1,34.3,376.9,32.0,374.9,31.9,374.8,32.5,374.5,33.8,375.5,33.8,375.6,36.3,375.6,39.2,377.9,39.4,377.9,40.8,380.6];
uk_UK.shape14 = [11.7,402.8,11.2,403.4,9.1,401.4,7.8,402.9,8.3,404.2,7.1,405.4,7.2,403.7,6.2,402.5,4.8,402.4,5.0,401.4,5.2,401.2,4.4,399.8,3.5,399.3,3.0,397.3,4.5,394.6,5.0,394.0,5.5,393.9,5.5,394.2,5.5,396.6,5.8,396.6,6.2,397.9,6.0,397.9,6.3,398.2,6.4,398.2,7.0,398.1,7.1,398.2,8.6,399.7,8.9,400.6,11.7,402.8];
uk_UK.shape15 = [1.6,390.5,1.4,391.1,0.4,390.6,0.2,390.6,0.1,388.1,0.0,388.1,0.3,387.8,1.4,387.8,1.4,389.7,1.6,390.5];
uk_UK.shape16 = [31.9,372.8,30.6,374.1,29.6,373.1,29.5,373.1,28.6,373.4,28.2,373.3,26.8,372.1,26.2,372.1,26.1,372.4,26.1,372.6,24.2,372.4,24.1,372.6,22.4,371.5,22.6,370.8,23.0,369.9,23.0,367.7,23.8,368.1,25.2,367.1,25.3,367.1,26.0,367.3,26.0,369.0,26.8,369.9,26.8,370.1,28.9,370.1,29.3,371.1,28.8,371.4,29.1,372.0,31.6,372.4,31.9,372.8];
uk_UK.shape17 = [51.5,347.2,51.4,347.2,51.2,348.6,50.0,347.8,49.7,347.2,48.0,346.2,47.3,344.9,47.5,344.7,46.5,342.5,46.6,342.3,47.0,342.2,46.8,341.9,46.8,340.0,48.8,340.9,49.9,343.1,50.0,343.2,50.1,344.9,50.8,345.4,51.5,347.2];
uk_UK.shape18 = [80.5,322.9,78.9,322.7,78.9,322.5,78.7,321.4,78.0,321.5,78.0,321.4,77.0,319.4,76.8,317.0,78.4,313.9,78.5,313.7,77.5,310.8,77.5,310.6,78.7,310.4,78.9,308.1,79.1,308.1,81.6,306.8,83.5,306.4,83.8,306.2,85.0,306.9,85.5,306.8,85.6,307.0,86.7,307.3,87.2,308.2,86.8,310.6,86.7,311.1,86.3,311.0,86.3,311.1,85.4,312.3,85.9,312.5,86.7,312.6,87.3,313.1,86.0,315.0,84.7,314.9,84.5,315.6,85.6,317.0,85.0,318.8,85.0,318.9,84.1,321.6,84.2,321.6,81.7,323.6,80.4,323.5,80.5,322.9];
uk_UK.shape19 = [111.3,245.0,111.2,246.6,108.3,245.7,106.7,244.8,105.0,243.4,104.7,241.5,103.8,240.6,103.8,239.1,103.7,239.1,100.7,235.6,99.7,235.1,99.9,234.2,99.8,234.1,99.4,233.1,98.4,232.5,98.2,231.5,98.8,231.6,98.9,230.3,98.8,229.2,98.0,228.8,97.2,228.0,97.8,227.8,97.8,227.6,96.0,226.2,95.0,225.8,95.2,224.9,96.5,224.4,98.0,225.7,98.1,225.7,98.8,225.9,98.8,226.0,99.2,227.0,99.2,227.1,99.5,226.9,100.5,227.2,100.5,225.7,100.6,225.7,101.1,225.4,101.7,226.7,101.7,226.8,101.8,226.7,101.8,226.7,102.0,224.6,102.4,224.7,102.8,225.2,103.2,227.2,103.5,227.8,104.9,227.8,105.3,228.8,105.4,228.9,105.2,229.0,106.4,230.2,107.0,229.8,107.1,230.0,108.0,230.2,107.5,231.1,108.0,231.9,108.0,231.9,108.2,231.8,109.8,232.3,110.7,233.6,110.2,234.8,113.0,238.9,112.4,240.1,110.8,240.6,110.3,241.5,111.3,245.0];
uk_UK.shape20 = [207.5,40.4,206.8,40.0,206.8,39.8,206.6,39.1,205.6,37.9,205.7,37.9,207.9,38.3,208.0,38.4,209.6,37.2,212.3,35.6,214.2,33.5,215.8,33.6,216.8,33.4,218.7,34.6,218.5,35.9,218.8,35.9,219.6,37.6,219.8,37.6,221.1,37.8,222.6,38.9,222.5,39.2,222.4,39.0,222.2,38.9,222.1,38.9,221.7,38.9,221.4,39.5,221.5,40.6,221.5,40.9,220.0,41.9,217.1,42.1,216.3,43.3,214.4,43.7,211.8,41.2,209.8,41.0,209.8,40.7,207.5,40.4];
uk_UK.shape21 = [40.4,329.0,40.5,328.6,39.5,327.2,40.4,326.9,40.4,326.9,40.4,326.5,40.4,326.5,40.4,326.2,39.0,323.1,39.2,323.0,38.9,322.2,38.6,322.2,38.4,320.8,38.4,320.3,40.0,320.3,40.1,320.6,42.6,323.2,43.8,325.4,43.9,326.1,44.6,327.4,44.9,327.3,47.5,327.4,47.1,326.2,45.0,325.4,45.0,325.1,44.2,323.6,46.0,322.9,46.1,322.2,46.4,322.2,47.2,319.6,47.2,319.6,46.3,319.6,46.2,319.4,44.8,317.8,45.0,317.7,44.7,315.4,47.1,315.0,47.1,315.2,49.0,316.6,49.6,318.1,49.9,317.9,50.6,317.7,52.0,318.3,52.1,318.2,53.2,318.8,54.4,320.4,55.7,321.2,55.0,322.2,55.0,323.8,54.2,324.8,54.9,326.1,53.0,328.1,52.7,330.1,54.6,327.8,54.6,327.8,57.4,328.0,57.6,328.2,58.2,331.9,58.1,331.9,58.3,332.0,58.4,332.6,59.1,332.3,59.6,332.5,61.5,337.6,62.4,338.9,62.5,338.9,66.7,346.8,66.2,348.8,66.0,349.2,65.7,349.2,63.5,347.4,63.4,347.1,60.4,344.8,59.8,344.0,57.5,342.5,57.4,342.5,57.4,341.1,57.2,341.1,56.4,340.6,56.5,340.4,55.7,338.8,55.7,338.6,58.9,337.9,58.9,337.9,55.8,337.5,54.1,335.7,52.6,332.2,51.5,333.6,51.9,333.9,52.1,334.7,52.3,336.6,50.2,336.1,46.1,333.0,44.8,330.9,45.4,334.4,42.4,331.9,42.4,331.8,41.0,331.6,40.9,331.6,40.4,329.0];
uk_UK.shape22 = [191.1,444.1,191.0,444.2,190.6,444.9,187.2,445.6,187.2,445.4,186.4,444.9,186.2,444.8,186.2,444.6,185.2,443.9,182.2,444.4,179.9,443.8,173.1,443.6,173.0,443.6,172.8,444.0,172.4,444.2,169.1,444.6,166.3,444.4,164.3,445.4,163.8,445.4,163.2,445.3,163.1,445.4,160.9,445.4,156.8,443.2,154.4,443.6,154.3,443.5,148.8,445.9,148.8,445.8,148.1,446.9,147.9,447.1,147.2,446.6,146.0,447.1,145.9,447.1,143.1,446.6,142.2,446.0,142.1,445.9,141.8,445.7,141.2,445.6,140.2,445.2,140.7,444.4,139.6,443.4,139.5,443.1,133.8,442.9,133.7,443.1,133.1,442.5,133.7,442.1,132.1,441.6,128.8,438.9,128.8,438.8,127.2,438.4,127.2,438.4,127.0,438.4,126.5,438.1,123.6,439.1,123.5,439.3,122.8,438.8,121.3,438.6,121.0,437.9,121.0,437.6,122.0,437.4,122.1,436.6,122.3,436.4,122.3,436.4,119.6,434.5,119.5,433.9,118.6,433.8,118.4,433.6,118.2,433.1,118.0,432.9,117.3,433.1,116.3,432.9,116.3,433.1,116.1,433.3,118.2,437.1,120.2,437.6,120.0,438.6,119.9,438.6,119.9,438.6,123.9,443.4,123.9,443.8,123.8,443.9,122.5,444.1,120.3,443.1,120.3,443.2,118.3,443.1,118.1,443.9,116.0,444.0,110.0,438.4,109.6,438.7,109.3,438.9,109.5,439.1,112.2,442.1,113.0,442.1,113.7,443.4,113.7,444.4,115.3,444.4,115.7,444.3,115.8,444.4,116.4,444.9,116.5,444.9,118.3,444.6,120.4,446.6,120.2,446.9,120.7,447.1,122.0,447.0,122.3,447.2,122.3,447.3,122.5,447.4,123.2,447.2,122.3,446.4,122.5,444.8,124.5,444.6,124.7,444.7,127.1,449.2,127.0,449.3,128.4,450.6,128.6,451.0,129.1,451.6,129.8,452.8,129.7,452.9,130.6,453.6,131.2,454.9,131.0,455.9,130.1,455.7,128.8,453.4,128.7,453.5,128.6,453.5,127.2,453.4,126.8,454.0,126.8,454.1,126.7,454.4,126.3,454.2,126.0,454.3,125.6,454.9,124.7,454.9,122.4,452.9,122.3,452.9,120.5,453.6,120.3,453.6,118.8,453.8,118.7,453.7,118.6,453.9,118.2,454.4,118.2,454.5,118.0,454.9,117.9,455.1,117.4,455.2,117.5,455.5,118.3,455.4,118.5,455.3,118.5,455.3,119.3,455.1,119.3,455.1,119.5,455.1,119.6,455.3,121.4,455.9,122.7,455.4,122.8,455.4,123.5,455.1,123.8,457.9,123.8,457.9,123.9,458.1,124.0,458.1,124.1,458.1,123.6,459.4,124.3,462.2,124.5,462.5,129.2,465.2,129.2,466.8,131.2,468.8,134.9,470.5,134.8,470.8,135.4,471.4,136.1,472.4,136.9,472.8,141.3,476.8,141.4,477.1,141.8,477.5,142.2,478.4,143.0,479.1,143.6,479.8,143.7,480.8,144.8,481.2,145.1,481.6,147.2,483.0,148.3,483.1,149.4,483.7,150.6,484.8,151.4,486.1,153.1,487.2,153.7,487.9,154.9,492.1,154.9,492.1,155.6,493.6,155.8,494.4,155.5,495.2,153.3,494.9,152.9,495.9,153.0,496.2,152.8,496.9,152.9,498.2,154.0,498.8,154.2,499.1,154.3,499.3,153.4,505.8,148.4,506.8,146.6,505.8,145.6,507.4,144.1,507.6,143.3,506.7,144.2,504.2,142.6,504.3,142.6,504.2,142.6,504.1,140.8,503.7,139.8,502.6,139.4,503.1,139.2,503.1,139.8,504.4,138.8,504.4,136.6,504.1,136.5,504.1,128.1,500.3,123.0,501.9,115.7,498.8,115.7,498.6,113.8,499.1,113.8,499.2,111.5,499.2,111.0,498.6,111.0,497.8,110.0,496.9,110.0,496.6,108.2,494.4,109.2,496.7,109.0,496.9,109.8,497.9,109.3,500.1,108.3,500.4,108.2,500.6,107.0,501.3,106.9,501.4,104.0,501.9,103.8,501.9,103.8,501.9,103.8,501.8,103.0,500.4,103.0,500.2,103.6,498.8,103.2,498.1,102.6,498.1,102.5,498.0,102.0,497.9,101.8,497.9,101.8,497.7,101.8,497.6,101.6,497.4,101.3,496.7,101.2,495.9,101.5,495.4,98.5,493.2,98.4,493.3,99.3,495.9,99.6,495.9,100.5,497.2,100.6,497.4,100.7,497.4,100.8,497.7,100.8,497.7,100.9,497.8,101.0,497.9,101.2,498.2,101.2,498.4,101.2,498.4,101.2,498.4,101.2,498.4,101.5,499.2,101.5,499.2,100.5,500.1,100.3,500.3,99.5,500.9,99.5,501.0,99.0,501.3,98.9,501.2,98.8,501.4,97.8,501.6,97.6,501.6,97.5,501.6,97.2,501.8,97.2,501.8,96.8,501.9,96.5,501.2,96.3,501.1,96.4,500.9,96.4,500.9,96.5,500.8,96.5,500.5,96.2,500.9,96.2,501.4,94.3,503.8,92.0,503.9,91.6,503.6,90.2,504.5,88.0,498.9,87.0,498.9,85.7,497.6,85.5,495.4,87.5,494.2,87.4,494.1,87.3,493.1,86.3,492.3,86.2,492.0,86.1,491.5,87.2,490.9,86.8,490.1,87.5,489.4,85.2,490.3,84.5,489.1,85.2,481.5,77.0,481.2,77.0,480.8,80.2,471.5,80.5,471.1,80.2,468.6,77.8,469.5,76.0,471.1,75.8,471.1,74.8,471.1,74.5,467.8,74.6,467.8,75.8,466.1,81.3,462.2,81.2,462.1,83.8,456.9,76.2,460.0,74.2,456.1,73.2,456.3,70.8,460.0,70.8,460.1,67.8,459.3,68.0,458.9,67.3,456.4,67.6,456.6,67.6,456.5,67.3,456.4,63.6,454.6,62.2,447.8,62.5,447.4,66.2,447.1,66.3,446.8,64.4,445.9,63.0,444.6,62.8,441.6,63.8,441.4,64.2,441.2,63.8,441.3,67.6,436.3,73.3,435.2,67.6,434.9,67.5,434.6,62.1,438.0,60.4,434.4,61.5,429.1,61.5,428.9,62.4,428.9,62.5,428.4,62.0,427.6,62.5,426.6,62.2,426.4,63.9,423.6,67.5,425.6,69.5,423.2,65.8,421.2,65.5,419.2,65.5,419.1,64.8,419.5,64.5,418.8,64.3,418.8,64.3,418.8,63.6,418.4,61.0,416.4,59.9,417.1,63.6,418.4,64.2,419.0,59.6,417.6,59.8,417.1,59.6,417.2,58.9,417.6,58.0,418.5,58.1,418.5,58.9,419.6,57.4,421.6,56.0,421.8,55.1,420.3,53.9,422.0,53.1,422.1,51.4,423.0,50.7,438.6,50.6,438.6,50.3,438.8,45.3,447.1,44.5,447.3,42.4,440.9,42.8,435.0,43.3,433.6,42.8,433.4,39.9,434.5,38.5,434.1,35.1,438.6,33.8,437.7,33.6,436.2,33.6,436.1,33.5,436.0,34.1,435.9,35.2,434.9,34.9,434.5,35.1,429.9,32.1,435.1,30.2,429.4,28.9,428.5,33.0,422.8,37.1,421.9,37.4,426.2,37.8,426.2,40.9,422.4,40.6,422.2,39.3,420.9,44.1,413.6,48.5,408.6,50.0,409.7,51.0,411.6,52.1,408.6,52.3,408.5,54.3,411.5,54.4,411.9,57.8,411.6,54.6,405.4,54.5,405.4,55.0,402.1,55.4,401.8,59.3,405.8,59.7,405.7,62.9,411.9,62.9,412.2,66.7,414.6,68.2,414.8,68.8,414.5,68.8,414.2,68.0,413.6,66.5,412.6,66.2,411.3,68.7,409.6,65.0,408.4,65.0,408.2,63.5,405.1,63.2,404.6,63.3,404.1,63.7,403.9,64.0,403.7,64.8,403.7,65.8,403.9,66.0,403.9,67.3,400.5,63.4,403.4,61.5,401.7,60.5,396.8,58.2,394.6,59.3,393.5,63.1,394.7,61.8,391.7,60.0,390.8,60.0,390.6,59.4,386.6,57.5,388.1,55.3,387.4,49.4,386.7,48.1,385.2,47.7,383.9,48.0,382.8,51.5,381.6,51.4,382.1,53.5,382.1,57.9,381.6,58.2,381.6,60.4,380.9,55.4,379.9,56.8,375.6,57.1,375.2,64.0,371.6,68.7,370.9,72.8,376.4,80.2,383.4,85.2,389.9,85.2,390.1,85.9,390.1,86.4,391.2,86.2,390.1,85.9,390.1,82.0,381.4,73.7,373.4,73.8,373.2,69.4,369.1,70.4,368.6,70.5,368.4,76.4,373.8,73.6,369.6,73.5,369.4,74.3,369.1,74.7,369.6,76.2,370.4,76.5,368.6,76.2,367.9,75.0,368.1,74.8,367.9,74.6,367.6,72.3,365.1,70.7,364.9,69.9,363.9,70.1,363.7,71.0,362.1,68.1,359.2,66.2,352.2,65.0,351.1,66.0,349.2,66.2,349.4,66.7,349.4,67.2,349.7,69.3,353.9,70.9,350.9,69.3,347.6,71.9,345.8,71.9,345.1,67.6,342.9,65.0,334.2,66.2,333.9,66.2,332.1,69.3,337.4,69.8,337.1,66.8,328.1,67.2,327.8,68.8,324.0,65.0,313.1,65.8,307.6,66.2,307.3,62.2,302.3,62.5,297.9,63.2,297.9,68.0,297.6,68.3,297.9,73.1,300.1,71.9,305.9,71.7,305.9,74.5,314.5,74.8,322.4,75.2,322.4,79.5,325.8,75.5,333.2,75.2,333.2,74.8,340.7,75.2,340.7,76.6,341.8,79.6,344.8,77.5,338.4,78.3,337.5,78.2,333.4,83.0,328.5,82.8,333.1,84.8,329.2,85.2,329.2,88.8,322.2,89.2,322.4,90.8,329.1,90.5,329.2,86.6,332.8,86.8,333.4,91.0,331.9,93.6,340.4,95.2,338.0,98.8,340.4,99.5,340.7,101.3,337.1,101.2,336.4,102.0,336.3,99.7,335.6,99.5,336.1,95.6,336.1,93.1,332.1,94.1,326.4,92.8,322.8,96.7,318.3,96.8,318.4,98.8,317.9,98.9,317.4,102.3,312.9,102.0,311.6,102.5,309.6,101.5,306.8,99.5,306.4,96.0,300.9,95.6,295.8,89.2,286.4,87.9,282.7,90.0,276.8,89.5,275.7,89.7,275.4,88.0,275.7,87.8,275.7,87.5,281.4,87.4,281.6,87.2,281.6,86.8,281.5,86.3,281.5,84.8,281.6,83.3,279.0,83.2,276.6,84.5,274.2,84.1,274.0,89.5,266.7,89.5,266.4,91.1,263.8,90.3,262.9,90.9,260.5,92.0,260.0,92.1,259.9,92.2,259.8,94.6,258.2,95.0,262.2,92.0,265.0,91.1,270.1,92.4,271.0,93.3,271.4,94.5,272.0,95.9,272.3,97.5,272.4,103.8,267.0,104.5,265.2,105.9,263.9,107.8,262.9,110.0,261.7,110.3,261.4,110.7,261.7,111.5,261.8,111.4,262.1,111.5,262.6,111.6,262.9,111.7,263.3,111.8,263.9,111.8,266.2,111.8,266.2,111.8,266.3,111.8,266.4,111.7,267.7,111.7,267.8,111.8,267.9,112.5,268.1,112.5,268.9,111.5,269.9,111.2,271.2,111.1,273.9,110.7,274.2,111.1,274.4,111.1,273.9,114.0,271.0,115.9,272.6,116.1,272.4,117.2,268.5,120.2,266.9,121.2,269.6,122.2,266.8,125.9,267.3,129.8,270.3,129.4,273.9,131.6,272.1,132.8,272.2,133.7,273.1,136.2,273.1,136.3,273.4,136.4,273.4,137.4,272.9,138.7,274.9,137.7,276.8,138.7,279.1,141.9,278.1,143.3,280.6,145.1,279.2,152.8,278.9,154.2,279.1,154.0,277.9,155.5,277.6,153.4,276.2,153.2,276.4,151.1,277.6,148.4,277.4,147.2,276.6,147.0,275.1,147.0,274.9,148.9,274.9,147.4,273.8,145.8,275.1,144.2,273.9,142.2,269.6,141.6,264.9,136.5,256.6,136.2,252.7,141.7,244.4,142.2,240.3,145.9,233.7,148.3,233.3,149.8,235.3,149.7,235.7,150.4,235.8,150.3,234.4,149.9,233.4,147.9,230.6,147.7,228.8,148.3,227.5,151.4,224.4,151.7,224.8,150.2,227.9,153.2,227.2,156.1,232.0,157.9,229.9,161.8,234.2,162.8,233.3,164.8,227.6,164.6,227.6,158.8,223.2,160.6,219.8,155.6,216.8,154.8,211.0,155.2,208.8,156.4,207.5,159.7,206.9,154.6,200.7,153.2,193.8,153.4,193.8,155.4,190.8,155.3,190.7,156.9,187.2,157.8,187.7,163.2,185.8,163.1,185.4,159.3,186.2,159.2,185.8,157.8,185.3,157.4,186.1,156.0,187.0,151.7,189.2,150.5,187.6,150.8,187.3,153.8,183.7,153.8,181.7,154.3,179.8,154.8,178.7,154.5,178.3,145.2,185.2,144.8,185.2,141.6,183.9,141.6,183.8,135.4,181.6,135.2,181.2,129.3,185.5,129.3,181.6,129.2,181.2,127.2,181.9,126.8,182.0,122.0,178.8,122.9,182.3,120.4,183.3,117.0,181.3,116.8,184.3,112.8,189.7,105.3,188.8,102.8,183.3,103.2,182.6,101.0,184.4,100.8,184.8,99.2,184.1,99.2,183.3,105.7,177.9,106.0,177.2,112.1,172.2,112.1,171.5,111.5,167.3,107.3,163.7,107.1,163.9,101.7,161.8,102.0,160.3,96.3,154.2,96.4,153.2,99.6,153.5,99.5,153.9,103.8,156.1,104.6,155.7,107.2,153.1,107.8,153.6,106.8,157.5,107.1,157.8,112.1,161.4,117.8,161.4,118.5,158.5,121.8,150.2,119.3,146.6,119.7,146.3,120.9,140.5,122.0,139.6,120.4,136.8,120.0,130.2,119.5,129.1,119.7,128.2,117.8,124.8,112.1,122.7,106.4,118.3,105.0,118.8,102.2,119.2,99.2,116.9,99.0,117.0,97.3,115.1,96.1,113.2,92.3,111.9,92.3,111.5,92.1,111.5,91.7,110.8,89.2,111.9,89.0,112.5,87.2,112.0,85.9,109.3,85.9,108.2,80.2,105.4,80.2,105.3,80.0,104.4,79.6,104.0,79.5,103.2,79.8,102.9,84.5,104.0,85.5,102.7,85.5,98.2,82.2,95.8,82.4,94.5,84.7,93.6,84.8,93.7,84.8,93.6,86.5,93.0,88.8,89.1,92.2,87.5,92.8,88.5,95.1,91.2,95.3,91.0,98.0,90.6,100.0,91.4,100.3,93.9,100.3,94.0,100.3,94.0,100.5,95.4,110.3,94.7,110.6,93.5,113.9,92.1,116.8,93.5,117.2,93.5,119.7,90.3,118.6,89.2,113.6,89.6,113.5,89.2,113.4,86.7,115.2,85.0,118.7,85.2,119.6,86.3,124.3,86.6,124.3,86.7,126.0,89.9,126.3,89.2,126.4,89.2,130.8,88.5,131.2,87.8,133.7,81.4,135.4,81.5,135.4,81.3,138.3,77.0,138.6,76.0,150.4,78.2,152.9,83.2,159.9,85.7,159.9,86.0,163.8,85.7,167.4,88.8,170.8,92.7,171.6,92.2,169.8,88.7,169.9,88.5,168.6,82.5,168.2,82.5,165.3,82.0,165.2,82.5,164.2,82.5,160.9,80.0,159.6,78.1,158.8,77.5,157.4,75.6,157.0,75.7,156.3,68.4,153.4,66.7,153.4,66.5,153.1,66.5,151.3,66.1,151.2,66.2,145.4,65.3,138.2,68.8,137.1,66.8,136.2,67.3,129.7,68.7,124.7,67.7,124.3,67.0,122.4,67.8,120.0,68.0,118.2,67.7,115.5,65.2,114.7,64.1,114.0,63.7,115.8,60.4,113.2,56.5,113.2,56.2,106.0,57.0,104.2,51.2,103.5,50.5,104.6,45.1,100.7,41.5,100.2,41.3,100.2,40.8,98.1,39.4,97.6,39.5,96.3,34.6,92.7,34.0,89.5,31.8,88.4,28.3,88.4,26.8,87.6,25.6,87.5,25.6,84.5,24.3,84.7,24.1,84.1,22.5,84.5,21.5,84.5,21.4,83.0,20.3,81.6,20.4,81.2,18.1,81.4,17.4,79.2,16.2,78.8,15.9,78.8,15.9,78.3,15.6,76.4,15.6,76.4,15.0,75.5,13.4,75.4,13.4,75.3,13.3,75.8,12.6,75.1,12.2,75.0,12.4,75.0,12.4,73.7,14.1,73.7,14.1,71.5,14.7,68.7,11.7,67.5,12.2,66.2,10.2,65.8,9.8,65.9,8.2,65.8,7.8,66.0,7.2,65.5,7.0,65.3,6.8,65.6,6.5,66.6,4.7,66.8,4.8,67.7,4.9,68.8,5.6,71.0,5.5,71.0,5.8,72.0,7.4,71.5,9.3,73.5,9.5,75.2,8.2,75.8,8.0,75.9,8.0,76.0,8.0,76.2,8.1,78.3,7.9,78.5,7.5,79.8,6.0,80.0,6.0,80.2,5.5,81.0,3.9,80.7,3.8,80.5,3.0,80.4,3.0,80.4,2.9,83.0,0.0,83.7,0.8,83.3,1.1,83.8,2.9,85.0,3.2,85.0,3.0,86.0,2.8,86.6,4.1,87.2,4.4,87.5,6.6,87.5,7.2,86.6,8.1,86.8,8.6,87.0,11.1,89.0,10.9,89.3,10.2,91.0,11.4,91.3,11.8,91.5,13.4,91.6,13.5,91.8,13.3,92.3,13.2,92.5,13.1,92.6,13.0,93.8,15.3,95.5,14.8,95.8,14.8,96.2,13.4,96.5,13.4,97.8,18.4,98.1,18.6,98.2,20.1,100.2,21.2,100.1,20.8,100.2,19.4,101.5,20.0,105.9,19.9,108.0,20.8,108.8,21.8,113.3,21.4,113.8,21.4,113.8,21.3,114.1,20.2,115.6,20.1,115.8,18.9,117.3,19.2,117.2,20.9,117.2,21.1,117.8,21.1,118.2,21.2,118.5,21.0,119.2,21.0,120.0,19.1,120.8,19.1,121.9,17.6,124.0,18.8,126.2,18.5,127.0,18.1,127.1,18.0,127.2,17.6,128.5,15.9,128.1,15.6,128.3,15.2,128.0,15.1,130.2,14.3,130.4,14.3,131.4,15.1,132.9,13.1,133.9,14.4,135.4,14.0,135.1,16.6,135.8,18.1,135.5,18.6,137.0,19.8,138.9,19.8,141.1,23.0,141.1,24.2,140.7,24.2,138.6,24.6,138.5,24.6,138.5,26.4,138.9,26.8,139.0,27.2,139.4,27.1,141.1,27.2,139.7,29.1,139.2,28.4,139.4,29.2,139.7,29.1,140.5,31.4,140.3,31.6,143.2,34.8,142.8,36.2,144.4,35.0,144.8,34.9,147.2,36.5,147.4,36.2,147.9,37.0,147.9,37.1,148.6,37.9,148.3,38.2,148.8,38.8,153.2,39.3,153.7,38.9,153.8,39.0,153.8,39.0,155.2,39.7,155.8,39.9,158.4,40.2,160.2,41.5,160.2,41.6,160.6,41.9,161.5,41.5,162.9,41.6,172.3,36.8,174.5,34.2,176.7,35.8,176.8,36.2,185.1,35.8,189.2,34.0,189.2,33.2,190.1,33.4,190.6,34.0,192.4,33.8,193.2,34.8,192.8,35.4,192.7,36.0,193.9,36.6,194.2,37.2,194.1,37.4,193.2,37.0,193.2,37.1,193.4,38.7,193.2,39.0,192.8,39.2,192.2,40.2,191.9,40.2,192.1,40.8,194.4,40.8,195.1,41.1,199.4,40.4,200.7,41.6,200.7,42.0,203.7,41.5,206.1,41.3,208.1,43.1,208.1,42.8,210.9,43.4,213.2,44.9,214.3,45.5,216.6,45.0,216.4,44.7,217.8,44.0,217.8,43.6,220.0,44.2,220.0,44.2,222.4,44.4,228.8,43.8,231.9,41.3,232.1,41.1,234.9,43.8,234.6,44.1,248.1,46.0,250.2,45.9,251.5,46.0,253.0,44.6,254.6,45.5,258.1,45.2,258.7,44.9,259.9,44.5,260.1,44.2,260.9,44.6,262.6,42.9,263.6,43.2,265.7,41.2,267.6,41.9,268.9,43.8,269.1,43.8,271.4,46.1,272.1,46.5,272.2,46.9,273.8,47.8,277.6,48.0,279.9,47.9,279.9,48.1,285.1,52.0,291.9,50.6,292.5,50.9,291.9,53.7,291.6,53.7,291.4,55.2,291.2,56.0,294.9,59.5,297.3,60.0,298.4,61.0,301.9,61.5,301.9,61.6,305.0,63.0,306.8,64.7,306.6,64.8,306.6,68.2,306.4,68.6,305.4,70.0,305.0,70.0,304.9,73.9,306.2,73.7,306.2,73.8,307.5,74.2,307.2,77.4,304.9,77.4,304.4,76.3,301.4,76.3,301.4,76.2,293.9,76.2,292.4,74.7,291.2,75.0,289.9,74.7,289.9,74.5,288.3,75.1,287.6,75.6,290.1,75.5,291.1,76.2,289.8,78.6,286.5,79.2,286.2,79.0,285.1,80.3,284.9,80.5,284.8,80.4,284.7,80.4,283.9,79.9,283.7,79.5,283.4,80.2,283.4,80.2,282.9,81.3,279.9,82.1,279.8,81.8,279.1,82.0,279.1,82.2,278.1,82.5,278.1,82.5,274.6,82.2,274.4,81.9,274.4,81.8,274.4,81.5,274.2,81.5,274.2,80.9,273.3,80.7,273.7,81.6,273.9,83.1,273.9,83.1,273.9,83.2,276.8,83.5,276.9,83.6,279.7,83.6,280.4,85.0,280.6,85.0,281.9,85.2,284.2,84.4,284.9,84.2,285.5,84.3,288.0,86.2,288.3,86.8,288.5,87.1,288.6,87.1,290.4,88.0,291.1,89.0,290.9,89.3,290.9,89.5,290.9,89.5,291.1,89.8,290.8,90.0,290.6,90.0,289.6,89.8,289.9,90.2,290.0,90.5,290.1,90.5,290.2,90.6,290.2,90.7,290.4,90.9,290.5,91.2,290.6,91.3,290.6,91.8,290.8,92.3,290.9,95.6,290.6,96.0,290.6,96.2,290.4,96.5,289.6,96.7,289.4,96.8,289.2,96.8,289.1,96.8,288.9,96.2,287.4,94.9,286.8,94.8,285.7,95.0,285.7,95.0,285.6,95.0,285.4,94.9,285.4,94.4,285.1,94.2,284.9,94.1,284.6,94.3,284.4,94.4,283.2,94.5,283.1,94.8,283.5,95.4,285.1,95.9,286.5,95.8,286.6,95.8,288.4,97.0,287.9,97.3,288.9,97.3,289.0,97.5,289.1,97.7,291.1,97.7,292.9,99.2,293.6,99.0,293.4,98.0,294.0,97.8,296.8,98.0,296.9,98.0,296.9,98.0,298.8,99.0,299.0,99.0,301.1,101.0,302.4,103.4,301.8,104.0,300.6,102.9,299.8,102.8,299.5,103.0,299.6,103.2,299.3,103.7,300.1,104.4,300.2,104.8,301.4,105.2,301.6,105.5,301.6,105.6,301.8,106.3,302.9,107.2,303.1,107.2,304.1,107.5,304.7,108.2,304.9,108.2,305.4,108.3,305.3,108.6,307.3,110.7,307.5,111.2,307.2,111.2,308.1,112.2,308.4,112.8,308.4,112.8,308.4,112.8,309.6,113.4,309.6,113.5,311.9,114.5,311.9,114.7,312.6,115.9,312.8,116.8,312.5,116.8,312.6,117.6,312.9,118.5,312.9,118.8,313.1,119.3,313.6,121.5,313.6,122.2,314.0,125.2,314.3,126.4,314.3,126.5,314.6,127.2,314.8,127.0,315.6,127.7,315.8,128.8,316.2,129.9,316.1,130.0,317.2,132.4,317.2,134.8,317.1,134.8,317.1,134.9,317.8,135.6,318.4,137.7,318.1,137.9,317.6,139.7,317.2,139.7,317.2,141.9,317.4,142.2,317.5,146.1,316.1,150.8,314.1,153.1,307.8,158.7,307.6,158.8,303.9,161.7,297.9,162.7,296.9,162.9,296.9,163.1,294.9,163.9,292.9,164.2,293.2,163.6,290.2,163.8,289.8,163.8,288.4,164.8,288.2,164.6,284.2,164.5,283.9,163.8,283.3,164.4,279.1,164.1,278.9,163.9,278.8,164.1,276.9,164.4,275.8,163.9,275.2,163.1,274.6,161.4,274.5,161.3,274.4,159.9,273.7,158.7,273.7,157.5,272.4,156.4,272.1,156.4,271.2,155.5,271.2,153.9,270.5,155.2,270.3,155.1,270.1,155.2,270.1,155.2,270.1,155.2,269.8,155.4,269.6,155.6,268.5,155.2,268.5,155.1,267.6,155.1,267.4,155.4,266.2,155.6,266.1,155.6,265.9,155.7,264.4,157.6,264.2,157.9,262.8,159.2,262.7,159.3,261.9,159.5,261.6,159.5,261.0,160.0,260.3,160.3,259.9,160.2,259.5,160.0,259.4,160.1,258.7,159.6,258.5,159.9,258.7,160.0,259.4,160.9,259.3,161.3,260.2,161.8,261.2,161.8,261.2,162.8,261.9,163.2,263.4,165.8,265.0,167.4,266.4,168.2,266.2,168.3,269.3,171.1,269.9,171.0,270.2,172.2,270.2,172.3,270.8,172.9,270.3,174.0,270.2,174.0,270.2,175.8,270.4,175.8,270.9,176.1,270.3,178.2,270.3,179.8,267.6,185.3,264.9,190.1,265.0,191.7,264.9,192.2,264.4,192.8,264.2,192.9,263.6,193.7,263.2,193.3,263.2,194.2,262.6,194.6,262.4,194.4,262.3,193.7,262.3,193.4,261.8,193.8,261.4,194.5,261.6,194.7,260.2,195.3,260.3,194.7,257.7,197.6,257.5,197.6,256.2,198.8,256.1,198.7,256.0,198.6,255.8,198.3,255.7,198.2,255.1,199.1,254.2,200.0,253.1,200.8,253.1,200.8,251.1,202.8,251.3,202.9,249.2,206.2,249.2,206.6,251.1,205.9,254.8,201.4,255.1,201.4,256.5,201.2,256.5,201.4,259.6,202.1,259.7,201.8,260.7,202.2,260.8,201.9,262.2,201.1,263.4,200.0,263.9,200.2,263.2,202.4,263.4,202.6,260.4,206.6,260.2,206.7,260.3,206.8,256.6,212.3,256.1,212.5,253.3,217.2,251.5,223.5,251.2,223.6,251.6,226.4,251.6,226.7,251.8,226.7,253.8,228.7,255.8,228.4,256.1,229.1,255.6,230.1,255.2,230.2,253.0,231.4,252.8,231.5,251.3,231.6,249.4,233.2,249.4,233.2,249.5,235.3,246.8,236.6,245.7,238.1,245.7,238.1,245.4,238.5,245.8,239.3,245.8,239.3,244.9,239.3,244.8,239.4,244.8,239.6,244.9,239.7,244.8,240.6,244.6,240.7,244.6,242.1,244.5,242.2,243.7,243.2,243.7,243.2,243.7,243.2,243.2,245.3,242.2,246.1,242.0,246.2,241.2,246.3,240.9,246.7,241.1,248.6,240.8,248.8,240.8,248.8,240.6,249.0,240.0,249.8,239.8,249.9,239.2,250.6,238.8,250.7,238.3,250.8,238.1,250.9,238.1,251.0,236.9,251.0,236.4,251.5,236.1,251.6,235.9,252.8,235.6,252.8,234.8,253.2,234.8,253.0,233.7,253.2,233.3,253.9,232.6,254.9,231.8,254.8,231.8,254.8,231.4,254.8,230.3,255.6,228.3,255.8,228.2,255.8,227.4,256.8,227.2,256.9,226.7,256.6,226.2,256.4,225.0,257.0,224.1,256.8,223.3,258.1,222.4,258.4,221.1,258.8,220.2,259.1,219.7,259.1,218.8,260.8,218.2,262.7,219.1,262.9,216.7,265.0,215.8,266.0,214.3,267.4,214.2,267.4,214.2,267.7,213.9,268.8,214.2,268.9,214.1,270.9,213.9,271.4,212.8,272.0,212.8,272.3,212.9,274.0,212.9,274.3,212.5,275.8,212.6,277.7,212.8,277.7,212.8,279.8,211.5,280.0,210.9,281.2,210.7,281.6,210.6,281.9,209.6,283.9,209.7,284.6,209.8,284.8,209.6,285.0,208.8,285.5,208.8,285.6,208.2,287.1,208.4,288.4,208.3,288.4,208.3,288.5,207.9,288.7,207.6,288.9,207.5,288.9,207.5,289.0,207.4,289.1,207.3,289.3,207.3,289.4,207.1,289.7,207.1,289.9,207.3,290.9,207.6,290.9,208.2,291.8,207.2,292.9,207.1,293.2,207.1,294.8,206.3,295.2,205.7,297.4,206.3,298.6,206.4,298.6,206.4,298.8,206.5,300.1,204.9,301.2,204.9,301.3,204.3,303.3,205.2,304.2,205.5,306.4,204.9,306.7,204.9,308.2,204.6,309.8,204.2,310.3,204.2,311.8,204.2,311.9,203.6,312.3,203.2,312.9,203.9,312.9,204.2,313.5,203.4,314.1,203.4,314.2,203.3,315.3,202.8,315.2,202.2,316.2,200.3,317.7,198.9,316.9,198.7,317.1,199.2,318.4,198.5,319.7,197.5,318.6,196.6,319.4,196.1,320.2,195.6,320.6,195.4,321.6,195.3,321.8,193.9,323.5,193.7,323.6,193.4,323.9,191.6,326.9,191.6,327.1,191.2,327.4,190.6,327.9,190.2,327.9,188.9,330.9,188.7,332.7,187.7,333.0,187.6,333.1,186.8,333.6,186.8,335.5,186.1,335.1,184.4,335.7,184.2,335.7,184.1,336.2,182.9,336.2,182.9,335.7,179.4,336.5,179.1,336.9,177.9,337.6,177.8,338.6,175.7,339.9,175.6,340.2,174.2,340.7,172.2,340.8,169.7,343.9,169.5,343.9,166.5,344.1,164.4,344.6,163.4,344.1,162.8,343.1,161.8,342.9,161.4,341.6,161.7,341.3,161.7,341.2,162.0,341.4,161.1,340.7,160.8,340.3,160.7,339.4,159.8,338.8,159.8,338.9,158.9,339.2,158.4,339.2,157.7,339.1,157.6,338.7,157.6,338.6,157.6,338.5,157.5,338.3,157.2,338.2,153.7,338.1,153.2,338.2,152.1,339.4,151.8,339.8,151.1,339.4,149.4,339.6,149.2,339.9,149.2,339.9,148.6,339.4,148.4,339.4,147.1,339.2,146.4,339.6,145.7,340.2,144.3,340.0,142.3,340.3,140.0,340.1,139.9,340.1,139.4,340.6,137.7,341.5,136.7,341.9,136.1,341.5,134.1,341.2,133.2,343.2,133.1,343.4,132.6,343.6,133.1,343.7,133.1,343.6,135.0,343.5,136.8,343.7,137.2,342.9,138.2,343.4,139.2,342.4,139.2,342.2,140.2,342.8,141.7,342.1,142.3,341.4,143.8,341.2,144.2,341.4,144.8,342.1,145.7,341.8,145.8,341.8,146.2,342.6,146.9,342.4,147.4,343.0,147.4,343.1,147.7,343.6,147.9,343.6,148.7,343.9,151.3,344.2,151.3,344.3,151.4,344.2,151.6,344.2,152.3,345.4,152.4,347.1,152.7,347.4,153.9,348.4,155.0,348.4,155.3,349.4,155.8,349.9,156.2,350.4,156.2,350.4,157.4,351.4,158.3,352.6,158.9,352.6,160.3,352.6,160.3,352.8,161.2,352.8,161.6,352.1,161.6,351.9,161.9,351.6,164.2,351.1,164.8,352.1,165.6,352.4,165.6,352.9,166.3,352.9,167.3,352.8,167.3,352.9,170.2,355.8,170.2,356.0,170.7,356.0,171.1,356.2,171.6,356.9,171.5,357.5,170.6,357.7,170.3,357.9,170.2,357.8,168.6,360.2,165.1,360.6,164.1,361.4,164.2,362.1,164.2,362.6,163.2,363.1,164.0,364.1,163.9,364.4,164.2,366.9,164.2,367.0,164.0,368.7,163.6,369.1,163.6,369.4,163.7,369.4,163.7,369.4,164.3,369.4,165.6,368.6,166.7,368.6,166.8,368.6,167.2,370.3,166.6,370.6,166.6,370.7,166.6,370.7,166.7,370.8,167.8,370.9,168.3,371.4,171.2,373.9,172.8,374.2,172.8,374.4,175.1,378.1,174.0,378.7,174.1,379.4,173.8,380.3,174.6,381.0,174.8,381.5,175.8,381.8,176.5,381.6,176.1,383.9,177.3,386.9,178.4,387.4,179.6,388.6,181.2,389.5,181.7,390.8,181.9,391.8,182.1,391.7,183.3,392.4,184.6,396.0,184.2,399.2,184.4,399.6,184.5,399.6,186.2,403.5,186.9,404.2,188.6,407.1,189.1,408.4,188.6,412.7,189.4,415.8,189.3,415.9,191.4,420.4,194.7,424.6,196.2,425.8,195.9,426.9,196.8,427.1,199.2,430.9,199.1,431.0,198.6,431.5,198.4,431.7,198.5,431.9,198.5,432.0,198.2,433.9,198.0,433.9,198.1,434.1,198.1,436.2,197.3,437.1,197.3,439.9,195.2,441.1,195.0,441.2,193.9,443.9,191.1,444.1];
covid19_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
