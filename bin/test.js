// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var covid19_Main = function() {
	this.currentStr = "";
	this.lastStr = "";
	this.unplotted = "unplotted<br>";
	this.framesDivisor = 8;
	this.count = 0;
	this.months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
	this.dayCounter = new covid19_datas_InternalDayCounter(5,3,2020);
	this.csvStats = "https://raw.githubusercontent.com/tomwhite/covid-19-uk-data/master/data/covid-19-cases-uk.csv";
	this.divertTrace = new htmlHelper_tools_DivertTrace();
	var e = null;
	var this1;
	if(e == null) {
		var canvas = window.document.createElement("canvas");
		var dom = canvas;
		var style = dom.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = "0px";
		style.top = "0px";
		style.position = "absolute";
		this1 = canvas;
	} else {
		this1 = e;
	}
	var canvas1 = this1;
	canvas1.width = 1024;
	canvas1.height = 768;
	window.document.body.appendChild(canvas1);
	var this2 = new htmlHelper_canvas_CanvasPlus(canvas1.getContext("2d",null),10,10);
	this.surface = this2;
	this.mapPlot = new covid19_visual_UKcanvasPlot(this.surface);
	this.textLoader = new htmlHelper_tools_TextLoader(["../data/postcodeAdmin.csv","../data/E_areas.csv","../data/latLongAdditional.csv","../data/SomeCities.csv",this.csvStats],$bind(this,this.finished));
};
covid19_Main.__name__ = true;
covid19_Main.main = function() {
	new covid19_Main();
};
covid19_Main.prototype = {
	drawGraph: function() {
		var _g = 0;
		var _g1 = this.citiesArr.length;
		while(_g < _g1) {
			var i = _g++;
			var city = this.citiesArr[i];
			var _this = this.mapPlot;
			var p_x = city.east * _this.scale + 100;
			var p_y = 500 - city.north * _this.scale;
			var _this1 = this.mapPlot;
			var ax = p_x;
			var ay = p_y;
			var theta = Math.PI / 2;
			var step = Math.PI * 2 / 36;
			var bx;
			var by;
			var cx;
			var cy;
			var this1 = _this1.surface;
			var tmp = StringTools.hex(16250871,6);
			this1.me.fillStyle = "#" + tmp;
			this1.me.beginPath();
			var this2 = _this1.surface;
			this2.me.lineWidth = 2.;
			var r = 255;
			var g = 165;
			var b = 0;
			this2.me.strokeStyle = "rgba(" + r + "," + g + "," + b + "," + 0. + ")";
			var _g2 = 0;
			while(_g2 < 36) {
				var i1 = _g2++;
				bx = ax + 10. * Math.sin(theta);
				by = ay + 10. * Math.cos(theta);
				theta += step;
				cx = ax + 10. * Math.sin(theta);
				cy = ay + 10. * Math.cos(theta);
				var this3 = _this1.surface;
				this3.x = ax;
				this3.y = ay;
				this3.me.moveTo(ax,ay);
				var this4 = _this1.surface;
				this4.x = bx;
				this4.y = by;
				this4.me.lineTo(bx,by);
				var this5 = _this1.surface;
				this5.x = cx;
				this5.y = cy;
				this5.me.lineTo(cx,cy);
				var this6 = _this1.surface;
				this6.x = ax;
				this6.y = ay;
				this6.me.lineTo(ax,ay);
			}
			var this7 = _this1.surface;
			this7.me.stroke();
			this7.me.closePath();
			this7.me.fill();
		}
		this.mapPlot.drawRectBorder();
	}
	,finished: function() {
		this.parseCSV();
		haxe_Log.trace("Animating UK data",{ fileName : "src/covid19/Main.hx", lineNumber : 79, className : "covid19.Main", methodName : "finished"});
		this.drawGraph();
		if(htmlHelper_tools_AnimateTimer.s == null) {
			htmlHelper_tools_AnimateTimer.s = window.document.createElement("style");
			htmlHelper_tools_AnimateTimer.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
			window.document.getElementsByTagName("head")[0].appendChild(htmlHelper_tools_AnimateTimer.s);
			htmlHelper_tools_AnimateTimer.s.animation = "spin 1s linear infinite";
			htmlHelper_tools_AnimateTimer.loop(60.0);
		}
		htmlHelper_tools_AnimateTimer.onFrame = $bind(this,this.render);
	}
	,render: function(i) {
		this.count++;
		if(this.count % this.framesDivisor == 0) {
			this.count = 0;
			this.renderDate();
			var this1 = this.dayCounter;
			var year = this1.year;
			var isLeap = year % 4 == 0 && (year % 100 == 0 ? year % 400 == 0 : true);
			var isLeapYear = isLeap;
			if(isLeapYear == null) {
				isLeapYear = false;
			}
			var dayTot = datetime_utils_DateTimeMonthUtils.days(this1.month,isLeapYear);
			this1.day++;
			if(this1.day > dayTot) {
				this1.day = 1;
				this1.month++;
				if(this1.month > 12) {
					this1.month = 1;
					this1.year++;
				}
			}
		}
	}
	,renderDate: function() {
		this.lastStr = this.currentStr + this.lastStr;
		var str = "";
		var colors = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var dayStat = covid19_datas__$StatsC19Arr_StatsC19Arr_$Impl_$.getByDate(this.stat19Arr,this.dayCounter);
		var _g = 0;
		var _g1 = dayStat.length;
		while(_g < _g1) {
			var i = _g++;
			var stat = dayStat[i];
			var this1 = this.additionalArr;
			var area = stat.area;
			var found = false;
			var eastNorth = new covid19_geo_EastNorth(0.,0.);
			var _g2 = 0;
			while(_g2 < this1.length) {
				var pos = this1[_g2];
				++_g2;
				if(pos.place.toLowerCase() == area.toLowerCase()) {
					eastNorth.east = pos.east;
					eastNorth.north = pos.north;
					found = true;
					break;
				}
			}
			var eastNorth1 = eastNorth;
			if(!(!(eastNorth1.east == 0. && eastNorth1.north == 0.))) {
				var this2 = this.longLatArr;
				var area1 = stat.area;
				var found1 = false;
				var eastNorth2 = new covid19_geo_EastNorth(0.,0.);
				var _g3 = 0;
				while(_g3 < this2.length) {
					var pos1 = this2[_g3];
					++_g3;
					if(pos1.admin_area.toLowerCase() == area1.toLowerCase()) {
						eastNorth2.east = pos1.east;
						eastNorth2.north = pos1.north;
						found1 = true;
						break;
					}
				}
				if(!found1) {
					var _g11 = 0;
					while(_g11 < this2.length) {
						var pos2 = this2[_g11];
						++_g11;
						if(pos2.county.toLowerCase() == area1.toLowerCase()) {
							eastNorth2.east = pos2.east;
							eastNorth2.north = pos2.north;
							found1 = true;
							break;
						}
					}
				}
				if(!found1) {
					var _g12 = 0;
					while(_g12 < this2.length) {
						var pos3 = this2[_g12];
						++_g12;
						if(pos3.admin_area.indexOf(" ") != -1) {
							if(pos3.admin_area.toLowerCase().indexOf(area1.toLowerCase()) != -1) {
								eastNorth2.east = pos3.east;
								eastNorth2.north = pos3.north;
								found1 = true;
								break;
							}
						}
					}
				}
				eastNorth1 = eastNorth2;
			}
			if(!(!(eastNorth1.east == 0. && eastNorth1.north == 0.))) {
				var this3 = this.area9Arr;
				var str1 = stat.areaCode;
				var stringMap = new haxe_ds_StringMap();
				var _g4 = 0;
				var _g13 = this3.length;
				while(_g4 < _g13) {
					var i1 = _g4++;
					var key = this3[i1].area9;
					var value = this3[i1].place;
					if(__map_reserved[key] != null) {
						stringMap.setReserved(key,value);
					} else {
						stringMap.h[key] = value;
					}
				}
				var _this = stringMap;
				if(__map_reserved[str1] != null ? _this.existsReserved(str1) : _this.h.hasOwnProperty(str1)) {
					var this4 = this.area9Arr;
					var str2 = stat.areaCode;
					var stringMap1 = new haxe_ds_StringMap();
					var _g5 = 0;
					var _g14 = this4.length;
					while(_g5 < _g14) {
						var i2 = _g5++;
						var key1 = this4[i2].area9;
						var value1 = this4[i2].place;
						if(__map_reserved[key1] != null) {
							stringMap1.setReserved(key1,value1);
						} else {
							stringMap1.h[key1] = value1;
						}
					}
					var _this1 = stringMap1;
					var area2 = __map_reserved[str2] != null ? _this1.getReserved(str2) : _this1.h[str2];
					var this5 = this.longLatArr;
					var found2 = false;
					var eastNorth3 = new covid19_geo_EastNorth(0.,0.);
					var _g6 = 0;
					while(_g6 < this5.length) {
						var pos4 = this5[_g6];
						++_g6;
						if(pos4.admin_area.toLowerCase() == area2.toLowerCase()) {
							eastNorth3.east = pos4.east;
							eastNorth3.north = pos4.north;
							found2 = true;
							break;
						}
					}
					if(!found2) {
						var _g15 = 0;
						while(_g15 < this5.length) {
							var pos5 = this5[_g15];
							++_g15;
							if(pos5.county.toLowerCase() == area2.toLowerCase()) {
								eastNorth3.east = pos5.east;
								eastNorth3.north = pos5.north;
								found2 = true;
								break;
							}
						}
					}
					if(!found2) {
						var _g16 = 0;
						while(_g16 < this5.length) {
							var pos6 = this5[_g16];
							++_g16;
							if(pos6.admin_area.indexOf(" ") != -1) {
								if(pos6.admin_area.toLowerCase().indexOf(area2.toLowerCase()) != -1) {
									eastNorth3.east = pos6.east;
									eastNorth3.north = pos6.north;
									found2 = true;
									break;
								}
							}
						}
					}
					eastNorth1 = eastNorth3;
				}
			}
			var eastNorth4 = eastNorth1;
			if(!(eastNorth4.east == 0. && eastNorth4.north == 0.)) {
				this.mapPlot.plot(eastNorth4,stat.totalCases,colors);
			}
			if(!(eastNorth4.east == 0. && eastNorth4.north == 0.)) {
				var str3 = "<b>" + stat.totalCases + "</b>" + " ill, ";
				var date = stat.date;
				var days = ((date - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date)) / 86400 | 0) + 1;
				var str4 = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date)) + " ";
				var str5 = this.months;
				var days1 = ((date - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date)) / 86400 | 0) + 1;
				str += str3 + (str4 + str5[datetime_utils_DateTimeMonthUtils.getMonth(days1,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date)) - 1]) + ", " + stat.area + " " + ("east " + Math.round(eastNorth4.east) + " north " + Math.round(eastNorth4.north));
				str += "<br>";
			} else {
				var tmp = this;
				var tmp1 = tmp.unplotted;
				var date1 = stat.date;
				var days2 = ((date1 - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date1)) / 86400 | 0) + 1;
				var tmp2 = datetime_utils_DateTimeMonthUtils.getMonthDay(days2,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date1)) + " ";
				var tmp3 = this.months;
				var days3 = ((date1 - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date1)) / 86400 | 0) + 1;
				tmp.unplotted = tmp1 + (tmp2 + tmp3[datetime_utils_DateTimeMonthUtils.getMonth(days3,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date1)) - 1] + ", " + stat.area + " " + stat.totalCases + " ill, ");
				this.unplotted += "<br>";
			}
		}
		if(str != "") {
			this.currentStr = str;
		} else {
			this.divertTrace.traceString = "";
			haxe_Log.trace(this.unplotted + "<br>-plotted<br>" + this.currentStr + this.lastStr,{ fileName : "src/covid19/Main.hx", lineNumber : 122, className : "covid19.Main", methodName : "renderDate"});
			htmlHelper_tools_AnimateTimer.onFrame = function(i3) {
			};
		}
	}
	,parseCSV: function() {
		var arr = this.parseData("postcodeAdmin.csv");
		var arrLL = [];
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			var arr1 = arr[i];
			var ll = new covid19_geo_LongLatUK();
			var toFloat = Std.parseFloat;
			var val = ll.ll_to_osOld(toFloat(arr1[2]),toFloat(arr1[3]));
			ll = null;
			var val1 = val;
			var this1 = new covid19_datas_InternalLongLatAreas(StringTools.trim(arr1[0]),StringTools.trim(arr1[1]),parseFloat(arr1[2]),parseFloat(arr1[3]),Std.parseInt(arr1[4]),Std.parseInt(arr1[5]),Std.parseInt(arr1[6]),Std.parseInt(arr1[7]),val1.east,val1.north);
			arrLL[i] = this1;
		}
		var this2 = arrLL;
		this.longLatArr = this2;
		var arr2 = this.parseData("covid-19-cases-uk.csv");
		var arr19 = [];
		var _g2 = 0;
		var _g11 = arr2.length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var arr3 = arr2[i1];
			var str = arr3[0];
			StringTools.trim(str);
			var str1 = arr3[1];
			StringTools.trim(str1);
			var str2 = arr3[2];
			StringTools.trim(str2);
			var str3 = arr3[3];
			StringTools.trim(str3);
			str3 = str3;
			if(StringTools.startsWith(str3,"\"")) {
				str3 = HxOverrides.substr(str3,1,str3.length);
			}
			if(StringTools.endsWith(str3,"\"")) {
				str3 = HxOverrides.substr(str3,0,str3.length);
			}
			var str4 = arr3[4];
			StringTools.trim(str4);
			var str5 = str4;
			if(str5 == "1 to 4") {
				str5 = "2";
			}
			var totalCases = Std.parseInt(str5);
			if(totalCases == null && arr3.length == 6) {
				var str6 = arr3[5];
				StringTools.trim(str6);
				str5 = str6;
				totalCases = Std.parseInt(str5);
			}
			var this3 = new covid19_datas_InternalStatsC19(str,str1,str2,str3,totalCases);
			arr19[i1] = this3;
		}
		var this4 = arr19;
		this.stat19Arr = this4;
		var arr4 = this.parseData("E_areas.csv");
		var arr9 = [];
		var _g3 = 0;
		var _g12 = arr4.length;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var arr5 = arr4[i2];
			var this5 = new covid19_datas_InternalArea9(StringTools.trim(arr5[0]),StringTools.trim(arr5[1]));
			arr9[i2] = this5;
		}
		var this6 = arr9;
		this.area9Arr = this6;
		var arr6 = this.parseData("latLongAdditional.csv");
		var arrAL = [];
		var _g4 = 0;
		var _g13 = arr6.length;
		while(_g4 < _g13) {
			var i3 = _g4++;
			var arr7 = arr6[i3];
			var ll1 = new covid19_geo_LongLatUK();
			var toFloat1 = Std.parseFloat;
			var val2 = ll1.ll_to_osOld(toFloat1(arr7[2]),toFloat1(arr7[3]));
			ll1 = null;
			var val3 = val2;
			var this7 = new covid19_datas_InternalAddLatLong(StringTools.trim(arr7[0]),StringTools.trim(arr7[1]),parseFloat(arr7[2]),parseFloat(arr7[3]),val3.east,val3.north);
			arrAL[i3] = this7;
		}
		var this8 = arrAL;
		this.additionalArr = this8;
		var arr8 = this.parseData("SomeCities.csv");
		var arrC = [];
		var _g5 = 0;
		var _g14 = arr8.length;
		while(_g5 < _g14) {
			var i4 = _g5++;
			var arr10 = arr8[i4];
			var ll2 = new covid19_geo_LongLatUK();
			var toFloat2 = Std.parseFloat;
			var val4 = ll2.ll_to_osOld(toFloat2(arr10[1]),toFloat2(arr10[2]));
			ll2 = null;
			var val5 = val4;
			var this9 = new covid19_datas_InternalCity(StringTools.trim(arr10[0]),"",parseFloat(arr10[1]),parseFloat(arr10[2]),val5.east,val5.north);
			arrC[i4] = this9;
		}
		var this10 = arrC;
		this.citiesArr = this10;
	}
	,parseData: function(fileNom) {
		var _this = this.textLoader.contents;
		var str = __map_reserved[fileNom] != null ? _this.getReserved(fileNom) : _this.h[fileNom];
		var sl = new htmlHelper_tools_StringCodeIterator(str);
		sl.c = sl.str.charCodeAt(sl.pos++);
		var arr = [];
		var arrTemp = [];
		var no = 0;
		var count = 0;
		while(sl.pos < sl.length) {
			switch(sl.c) {
			case 10:case 13:
				sl.last2 = sl.last;
				sl.last = sl.b.b;
				arrTemp[count] = sl.last;
				arr[no++] = arrTemp.slice();
				count = 0;
				sl.b = new StringBuf();
				break;
			case 44:
				if(count == 0) {
					arrTemp.length = 0;
					sl.last2 = sl.last;
					sl.last = sl.b.b;
					arrTemp[0] = sl.last;
				} else {
					sl.last2 = sl.last;
					sl.last = sl.b.b;
					arrTemp[count] = sl.last;
				}
				++count;
				sl.b = new StringBuf();
				break;
			default:
				var c = sl.c;
				sl.b.b += String.fromCodePoint(c);
			}
			sl.c = sl.str.charCodeAt(sl.pos++);
		}
		var arr1 = arr;
		arr1.shift();
		return arr1;
	}
};
var covid19_datas_InternalAddLatLong = function(place,area9,latitude,longitude,east,north) {
	this.place = place;
	this.area9 = area9;
	this.latitude = latitude;
	this.longitude = longitude;
	this.east = east;
	this.north = north;
};
covid19_datas_InternalAddLatLong.__name__ = true;
var covid19_datas_InternalArea9 = function(area9,place) {
	this.area9 = area9;
	this.place = place;
};
covid19_datas_InternalArea9.__name__ = true;
var covid19_datas_InternalCity = function(place,area9,latitude,longitude,east,north) {
	this.place = place;
	this.area9 = area9;
	this.latitude = latitude;
	this.longitude = longitude;
	this.east = east;
	this.north = north;
};
covid19_datas_InternalCity.__name__ = true;
var covid19_datas_InternalDayCounter = function(day,month,year) {
	this.day = day;
	this.month = month;
	this.year = year;
};
covid19_datas_InternalDayCounter.__name__ = true;
var covid19_datas_InternalLongLatAreas = function(admin_area,county,latitude,longitude,postcodes,active_postcodes,population,households,east,north) {
	this.admin_area = admin_area;
	this.county = county;
	this.latitude = latitude;
	this.longitude = longitude;
	this.postcodes = postcodes;
	this.active_postcodes = active_postcodes;
	this.population = population;
	this.households = households;
	this.east = east;
	this.north = north;
};
covid19_datas_InternalLongLatAreas.__name__ = true;
var covid19_datas_InternalStatsC19 = function(date,country,areaCode,area,totalCases) {
	this.date = datetime_utils_DateTimeUtils.fromString(date);
	this.country = country;
	this.areaCode = areaCode;
	this.area = area;
	this.totalCases = totalCases;
};
covid19_datas_InternalStatsC19.__name__ = true;
var covid19_datas__$StatsC19Arr_StatsC19Arr_$Impl_$ = {};
covid19_datas__$StatsC19Arr_StatsC19Arr_$Impl_$.__name__ = true;
covid19_datas__$StatsC19Arr_StatsC19Arr_$Impl_$.getByDate = function(this1,dayCounter) {
	var arr = [];
	var j = 0;
	var _g = 0;
	while(_g < this1.length) {
		var stat = this1[_g];
		++_g;
		var date = stat.date;
		var tmp;
		var days = ((date - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date)) / 86400 | 0) + 1;
		if(datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date)) == dayCounter.day) {
			var days1 = ((date - 62135596800.0 - datetime__$DateTime_DateTime_$Impl_$.yearStart(date)) / 86400 | 0) + 1;
			tmp = datetime_utils_DateTimeMonthUtils.getMonth(days1,datetime__$DateTime_DateTime_$Impl_$.isLeapYear(date)) == dayCounter.month;
		} else {
			tmp = false;
		}
		if(tmp && datetime__$DateTime_DateTime_$Impl_$.getYear(date) == dayCounter.year) {
			arr[j++] = stat;
		}
	}
	return arr;
};
var covid19_geo_EastNorth = function(east,north) {
	this.east = east;
	this.north = north;
};
covid19_geo_EastNorth.__name__ = true;
var covid19_geo_LongLatUK = function() {
	this.lambda0 = -2 * Math.PI / 180;
	this.phi0 = 49 * Math.PI / 180;
	this.f0 = 0.9996012717;
	this.e0 = 400000.;
	this.n0 = -100000.;
	this.osgb36_b = 6356256.909;
	this.osgb36_a = 6377563.396;
};
covid19_geo_LongLatUK.__name__ = true;
covid19_geo_LongLatUK.prototype = {
	fM: function(phi,a,b) {
		var n = (a - b) / (a + b);
		var n2 = Math.pow(n,2);
		var n3 = n * n2;
		var dphi = phi - this.phi0;
		var sphi = phi + this.phi0;
		return b * this.f0 * ((1 + n + 1.25 * (n2 + n3)) * dphi - (3 * n + 3 * n2 + 2.625 * n3) * Math.sin(dphi) * Math.cos(sphi) + 1.875 * (n2 + n3) * Math.sin(2 * dphi) * Math.cos(2 * sphi) - 1.45833333333333326 * n3 * Math.sin(3 * dphi) * Math.cos(3 * sphi));
	}
	,ll_to_osOld: function(phi,lam) {
		return this.ll_to_os(phi,lam,this.osgb36_a,this.osgb36_b);
	}
	,ll_to_os: function(phi,lam,a,b) {
		var phi1 = phi * Math.PI / 180;
		var lam1 = lam * Math.PI / 180;
		var a2 = Math.pow(a,2);
		var e2 = (a2 - Math.pow(b,2)) / a2;
		var rho = a * this.f0 * (1 - e2) * Math.pow(1 - Math.pow(e2 * Math.sin(phi1),2),-1.5);
		var nu = a * this.f0 / Math.sqrt(1 - e2 * Math.pow(Math.sin(phi1),2));
		var eta2 = nu / rho - 1;
		var m = this.fM(phi1,a,b);
		var sin_phi = Math.sin(phi1);
		var cos_phi = Math.cos(phi1);
		var cos_phi2 = Math.pow(cos_phi,2);
		var cos_phi3 = cos_phi2 * cos_phi;
		var cos_phi5 = cos_phi3 * cos_phi2;
		var tan_phi2 = Math.pow(Math.tan(phi1),2);
		var tan_phi4 = tan_phi2 * tan_phi2;
		var a1 = m + this.n0;
		var a21 = nu / 2 * sin_phi * cos_phi;
		var a3 = nu / 24 * sin_phi * cos_phi3 * (5 - tan_phi2 + 9 * eta2);
		var a4 = nu / 720 * sin_phi * cos_phi5 * (61 - 58 * tan_phi2 + tan_phi4);
		var b1 = nu * cos_phi;
		var b2 = nu / 6 * cos_phi3 * (nu / rho - tan_phi2);
		var b3 = nu / 120 * cos_phi5 * (5 - 18 * tan_phi2 + tan_phi4 + eta2 * (14 - 58 * tan_phi2));
		var lml0 = lam1 - this.lambda0;
		var lml02 = Math.pow(lml0,2);
		var n = a1 + lml02 * (a21 + lml02 * (a3 + a4 * lml02));
		var e = this.e0 + lml0 * (b1 + lml02 * (b2 + b3 * lml02));
		return new covid19_geo_EastNorth(e,n);
	}
};
var covid19_visual_UKcanvasPlot = function(surface) {
	this.colorChange = 0.0454545454545454558;
	this.sizeScale = 0.0555555555555555525;
	this.scale = 0.0005;
	this.alpha = 0.3;
	this.maxY = 1.75159;
	this.maxX = 60.15456;
	this.minY = -7.64133;
	this.minX = 50.10319;
	this.surface = surface;
};
covid19_visual_UKcanvasPlot.__name__ = true;
covid19_visual_UKcanvasPlot.prototype = {
	plot: function(eastNorth,cases,colors) {
		var size = cases * this.sizeScale;
		var fillColor = colors[Math.round(cases * this.colorChange)];
		var p_x = eastNorth.east * this.scale + 100;
		var p_y = 500 - eastNorth.north * this.scale;
		var radius = size * 0.5;
		var fillAlpha = this.alpha;
		var ax = p_x;
		var ay = p_y;
		var theta = Math.PI / 2;
		var step = Math.PI * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var this1 = this.surface;
		if(fillAlpha != null && fillAlpha != 1.0) {
			var r = fillColor >> 16 & 255;
			var g = fillColor >> 8 & 255;
			var b = fillColor & 255;
			this1.me.fillStyle = "rgba(" + r + "," + g + "," + b + "," + fillAlpha + ")";
		} else {
			var tmp = StringTools.hex(fillColor,6);
			this1.me.fillStyle = "#" + tmp;
		}
		this1.me.beginPath();
		var this2 = this.surface;
		this2.me.lineWidth = 2.;
		var r1 = 255;
		var g1 = 165;
		var b1 = 0;
		this2.me.strokeStyle = "rgba(" + r1 + "," + g1 + "," + b1 + "," + 0. + ")";
		var _g = 0;
		while(_g < 36) {
			var i = _g++;
			bx = ax + radius * Math.sin(theta);
			by = ay + radius * Math.cos(theta);
			theta += step;
			cx = ax + radius * Math.sin(theta);
			cy = ay + radius * Math.cos(theta);
			var this3 = this.surface;
			this3.x = ax;
			this3.y = ay;
			this3.me.moveTo(ax,ay);
			var this4 = this.surface;
			this4.x = bx;
			this4.y = by;
			this4.me.lineTo(bx,by);
			var this5 = this.surface;
			this5.x = cx;
			this5.y = cy;
			this5.me.lineTo(cx,cy);
			var this6 = this.surface;
			this6.x = ax;
			this6.y = ay;
			this6.me.lineTo(ax,ay);
		}
		var this7 = this.surface;
		this7.me.stroke();
		this7.me.closePath();
		this7.me.fill();
	}
	,drawRectBorder: function() {
		var ll = new covid19_geo_LongLatUK();
		var min = ll.ll_to_osOld(this.minX,this.minY);
		var max = ll.ll_to_osOld(this.maxX,this.maxY);
		var x = min.east * this.scale + 100;
		var y = 500 - min.north * this.scale + 100;
		var w = (max.east - min.east) * this.scale + 100;
		var h = 500 - max.north * this.scale - (500 - min.north * this.scale);
		var this1 = this.surface;
		var r = 0;
		var g = 0;
		var b = 255;
		this1.me.fillStyle = "rgba(" + r + "," + g + "," + b + "," + 0. + ")";
		this1.me.beginPath();
		var this2 = this.surface;
		this2.me.lineWidth = 2.;
		var tmp = StringTools.hex(15790320,6);
		this2.me.strokeStyle = "#" + tmp;
		var this3 = this.surface;
		this3.x = x;
		this3.y = y;
		this3.me.moveTo(x,y);
		var this4 = this.surface;
		var x1 = x + w;
		this4.x = x1;
		this4.y = y;
		this4.me.lineTo(x1,y);
		var this5 = this.surface;
		var x2 = x + w;
		var y1 = y + h;
		this5.x = x2;
		this5.y = y1;
		this5.me.lineTo(x2,y1);
		var this6 = this.surface;
		var y2 = y + h;
		this6.x = x;
		this6.y = y2;
		this6.me.lineTo(x,y2);
		var this7 = this.surface;
		this7.x = x;
		this7.y = y;
		this7.me.lineTo(x,y);
		var this8 = this.surface;
		this8.me.stroke();
		this8.me.closePath();
		this8.me.fill();
	}
};
var datetime__$DateTime_DateTime_$Impl_$ = {};
datetime__$DateTime_DateTime_$Impl_$.__name__ = true;
datetime__$DateTime_DateTime_$Impl_$.getYear = function(this1) {
	var cquads = (this1 / 12622780800.0 | 0) * 12622780800.0;
	var centuries = ((this1 - cquads) / 3155673600.0 | 0) * 3155673600.0;
	if(centuries > 9467020800.) {
		centuries -= 3155673600.0;
	}
	var quads = ((this1 - cquads - centuries) / 126230400.0 | 0) * 126230400.0;
	var years = (this1 - cquads - centuries - quads) / 31536000 | 0;
	return (cquads / 12622780800.0 | 0) * 400 + (centuries / 3155673600.0 | 0) * 100 + (quads / 126230400.0 | 0) * 4 + (years == 4 ? years : years + 1);
};
datetime__$DateTime_DateTime_$Impl_$.yearStart = function(this1) {
	var cquads = (this1 / 12622780800.0 | 0) * 12622780800.0;
	var centuries = ((this1 - cquads) / 3155673600.0 | 0) * 3155673600.0;
	if(centuries > 9467020800.) {
		centuries -= 3155673600.0;
	}
	var quads = ((this1 - cquads - centuries) / 126230400.0 | 0) * 126230400.0;
	var years = (this1 - cquads - centuries - quads) / 31536000 | 0;
	if(years == 4) {
		--years;
	}
	return cquads + centuries + quads + years * 31536000 - 62135596800.0;
};
datetime__$DateTime_DateTime_$Impl_$.isLeapYear = function(this1) {
	var year = datetime__$DateTime_DateTime_$Impl_$.getYear(this1);
	if(year % 4 == 0) {
		if(year % 100 == 0) {
			return year % 400 == 0;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
var datetime_utils_DateTimeMonthUtils = function() { };
datetime_utils_DateTimeMonthUtils.__name__ = true;
datetime_utils_DateTimeMonthUtils.days = function(month,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(month == 1) {
		return 31;
	} else if(month == 2 && isLeapYear) {
		return 29;
	} else if(month == 2) {
		return 28;
	} else if(month == 3) {
		return 31;
	} else if(month == 4) {
		return 30;
	} else if(month == 5) {
		return 31;
	} else if(month == 6) {
		return 30;
	} else if(month == 7) {
		return 31;
	} else if(month == 8) {
		return 31;
	} else if(month == 9) {
		return 30;
	} else if(month == 10) {
		return 31;
	} else if(month == 11) {
		return 30;
	} else {
		return 31;
	}
};
datetime_utils_DateTimeMonthUtils.getMonth = function(days,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(days < 32) {
		return 1;
	} else if(isLeapYear) {
		if(days < 61) {
			return 2;
		} else if(days < 92) {
			return 3;
		} else if(days < 122) {
			return 4;
		} else if(days < 153) {
			return 5;
		} else if(days < 183) {
			return 6;
		} else if(days < 214) {
			return 7;
		} else if(days < 245) {
			return 8;
		} else if(days < 275) {
			return 9;
		} else if(days < 306) {
			return 10;
		} else if(days < 336) {
			return 11;
		} else {
			return 12;
		}
	} else if(days < 60) {
		return 2;
	} else if(days < 91) {
		return 3;
	} else if(days < 121) {
		return 4;
	} else if(days < 152) {
		return 5;
	} else if(days < 182) {
		return 6;
	} else if(days < 213) {
		return 7;
	} else if(days < 244) {
		return 8;
	} else if(days < 274) {
		return 9;
	} else if(days < 305) {
		return 10;
	} else if(days < 335) {
		return 11;
	} else {
		return 12;
	}
};
datetime_utils_DateTimeMonthUtils.getMonthDay = function(days,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(days < 32) {
		return days;
	} else if(isLeapYear) {
		if(days < 61) {
			return days - 31;
		} else if(days < 92) {
			return days - 60;
		} else if(days < 122) {
			return days - 91;
		} else if(days < 153) {
			return days - 121;
		} else if(days < 183) {
			return days - 152;
		} else if(days < 214) {
			return days - 182;
		} else if(days < 245) {
			return days - 213;
		} else if(days < 275) {
			return days - 244;
		} else if(days < 306) {
			return days - 274;
		} else if(days < 336) {
			return days - 305;
		} else {
			return days - 335;
		}
	} else if(days < 60) {
		return days - 31;
	} else if(days < 91) {
		return days - 59;
	} else if(days < 121) {
		return days - 90;
	} else if(days < 152) {
		return days - 120;
	} else if(days < 182) {
		return days - 151;
	} else if(days < 213) {
		return days - 181;
	} else if(days < 244) {
		return days - 212;
	} else if(days < 274) {
		return days - 243;
	} else if(days < 305) {
		return days - 273;
	} else if(days < 335) {
		return days - 304;
	} else {
		return days - 334;
	}
};
datetime_utils_DateTimeMonthUtils.toSeconds = function(month,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	return 86400 * (month == 1 ? 0 : isLeapYear ? month == 2 ? 31 : month == 3 ? 60 : month == 4 ? 91 : month == 5 ? 121 : month == 6 ? 152 : month == 7 ? 182 : month == 8 ? 213 : month == 9 ? 244 : month == 10 ? 274 : month == 11 ? 305 : 335 : month == 2 ? 31 : month == 3 ? 59 : month == 4 ? 90 : month == 5 ? 120 : month == 6 ? 151 : month == 7 ? 181 : month == 8 ? 212 : month == 9 ? 243 : month == 10 ? 273 : month == 11 ? 304 : 334);
};
var datetime_utils_DateTimeUtils = function() { };
datetime_utils_DateTimeUtils.__name__ = true;
datetime_utils_DateTimeUtils.fromString = function(str) {
	if(str.length == 10 || str.charCodeAt(10) == 32) {
		return datetime_utils_DateTimeUtils.parse(str);
	} else if(str.charCodeAt(10) == 84) {
		return datetime_utils_DateTimeUtils.fromIsoString(str);
	} else {
		throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD` or `YYYY-MM-DDThh:mm:ss[.SSS]Z`");
	}
};
datetime_utils_DateTimeUtils.parse = function(str) {
	var ylength = str.indexOf("-");
	if(ylength < 1 || str.length - ylength != 6 && str.length - ylength != 15) {
		throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD`");
	}
	if(str.length - ylength == 6) {
		str += " 00:00:00";
	}
	var year = Std.parseInt(HxOverrides.substr(str,0,ylength));
	var month = Std.parseInt(HxOverrides.substr(str,ylength + 1,2));
	var day = Std.parseInt(HxOverrides.substr(str,ylength + 4,2));
	var hour = Std.parseInt(HxOverrides.substr(str,ylength + 7,2));
	var minute = Std.parseInt(HxOverrides.substr(str,ylength + 10,2));
	var second = Std.parseInt(HxOverrides.substr(str,ylength + 13,2));
	if(year == null || month == null || day == null || hour == null || minute == null || second == null) {
		throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD`");
	}
	var year1 = year;
	var month1 = month;
	var day1 = day;
	var hour1 = hour;
	var minute1 = minute;
	var second1 = second;
	if(second1 == null) {
		second1 = 0;
	}
	if(minute1 == null) {
		minute1 = 0;
	}
	if(hour1 == null) {
		hour1 = 0;
	}
	if(day1 == null) {
		day1 = 1;
	}
	if(month1 == null) {
		month1 = 1;
	}
	if(year1 == null) {
		year1 = 1970;
	}
	var this1 = datetime_utils_DateTimeUtils.yearToStamp(year1) + datetime_utils_DateTimeMonthUtils.toSeconds(month1,year1 % 4 == 0 && (year1 % 100 == 0 ? year1 % 400 == 0 : true)) + (day1 - 1) * 86400 + hour1 * 3600 + minute1 * 60 + second1 - 62135596800.0 + 62135596800.0;
	return this1;
};
datetime_utils_DateTimeUtils.fromIsoString = function(str) {
	var dotPos = str.indexOf(".");
	var zPos = str.indexOf("Z");
	if(str.charCodeAt(str.length - 1) != 90) {
		throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Not an ISO 8601 UTC/Zulu string: Z not found.");
	}
	if(str.length > 20) {
		if(str.charCodeAt(19) != 46) {
			throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Not an ISO 8601 string: Millisecond specification erroneous.");
		}
		if(str.charCodeAt(23) != 90) {
			throw new js__$Boot_HaxeError("`" + str + "` - incorrect date/time format. Not an ISO 8601 string: Timezone specification erroneous.");
		}
	}
	return datetime_utils_DateTimeUtils.parse(HxOverrides.substr(str,0,10) + " " + HxOverrides.substr(str,11,8));
};
datetime_utils_DateTimeUtils.yearToStamp = function(year) {
	--year;
	var cquads = year / 400 | 0;
	var quads = (year - cquads * 400) / 4 | 0;
	var excessDays = quads / 25 | 0;
	return cquads * 12622780800.0 + quads * 126230400.0 - excessDays * 86400 + (year - cquads * 400 - quads * 4) * 31536000;
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = true;
haxe_http_HttpBase.prototype = {
	onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpJs.__name__ = true;
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				s = null;
			}
			if(s == 0 && typeof(window) != "undefined") {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var onreadystatechange1 = haxe_io_Bytes.ofData(r.response);
				_gthis.success(onreadystatechange1);
			} else if(s == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				_gthis.responseBytes = haxe_io_Bytes.ofData(r.response);
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					_gthis.responseBytes = haxe_io_Bytes.ofData(r.response);
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postBytes;
		var _g1 = this.postData;
		if(_g1 == null) {
			if(_g == null) {
				uri = null;
			} else {
				var bytes = _g;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g == null) {
			var str = _g1;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g2 = 0;
			var _g3 = this.params;
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				if(uri == null) {
					uri = "";
				} else {
					uri = Std.string(uri) + "&";
				}
				var s1 = p.name;
				var value = Std.string(uri) + encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri = value + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + Std.string(uri),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( e2 ) {
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			this.req = null;
			this.onError(e3.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g21 = 0;
		var _g31 = this.headers;
		while(_g21 < _g31.length) {
			var h1 = _g31[_g21];
			++_g21;
			r.setRequestHeader(h1.name,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var htmlHelper_canvas_CanvasPlus = function(me,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.me = me;
};
htmlHelper_canvas_CanvasPlus.__name__ = true;
var htmlHelper_tools_AnimateTimer = function() { };
htmlHelper_tools_AnimateTimer.__name__ = true;
htmlHelper_tools_AnimateTimer.loop = function(tim) {
	window.requestAnimationFrame(htmlHelper_tools_AnimateTimer.loop);
	if(htmlHelper_tools_AnimateTimer.onFrame != null) {
		htmlHelper_tools_AnimateTimer.onFrame(htmlHelper_tools_AnimateTimer.counter);
	}
	htmlHelper_tools_AnimateTimer.counter++;
	return true;
};
var htmlHelper_tools_DivertTrace = function(left,d) {
	if(left == null) {
		left = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	this.divertTrace(left,d);
};
htmlHelper_tools_DivertTrace.__name__ = true;
htmlHelper_tools_DivertTrace.prototype = {
	divertTrace: function(left,d) {
		if(d == null) {
			var doc = window.document;
			this.traceDiv = doc.createElement("div");
			doc.body.appendChild(this.traceDiv);
			var dom = this.traceDiv;
			var style = dom.style;
			style.position = "absolute";
			style.top = "0px";
			style.left = (left == null ? "null" : "" + left) + "px";
			style.height = "500px";
			style.width = "500px";
			style.zIndex = "99";
			style.overflow = "auto";
		} else {
			this.traceDiv = d;
		}
		haxe_Log.trace = $bind(this,this.myTrace);
	}
	,myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
};
var htmlHelper_tools_StringCodeIterator = function(str_,pos_) {
	if(pos_ == null) {
		pos_ = 0;
	}
	this.str = "";
	this.pos = pos_;
	this.str = str_;
	this.length = this.str.length;
	this.b = new StringBuf();
};
htmlHelper_tools_StringCodeIterator.__name__ = true;
var htmlHelper_tools_TextLoader = function(fileNames,loaded_,itemLoaded_) {
	this.reload(fileNames,loaded_,itemLoaded_);
};
htmlHelper_tools_TextLoader.__name__ = true;
htmlHelper_tools_TextLoader.prototype = {
	reload: function(fileNames,loaded_,itemLoaded_) {
		this.contents = new haxe_ds_StringMap();
		this.loaded = loaded_;
		if(itemLoaded_ != null) {
			this.itemLoaded = itemLoaded_;
		}
		this.count = fileNames.length;
		var _g = 0;
		while(_g < fileNames.length) {
			var file = fileNames[_g];
			++_g;
			this.load(file);
		}
	}
	,load: function(file) {
		var r = new haxe_http_HttpJs(file);
		r.onError = js_Browser.alert;
		var f = $bind(this,this.store);
		var name = file.split("/").pop();
		r.onData = function(data) {
			f(name,data);
		};
		r.request(false);
	}
	,store: function(name,data) {
		this.count--;
		if(this.itemLoaded != null) {
			this.itemLoaded(name);
		}
		var _this = this.contents;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,data);
		} else {
			_this.h[name] = data;
		}
		if(this.count == 0) {
			this.loaded();
		}
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
js_Browser.alert = function(v) {
	window.alert(Std.string(v));
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
htmlHelper_tools_AnimateTimer.counter = 0;
covid19_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
